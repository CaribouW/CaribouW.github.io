<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>论文笔记-FlexSC</title>
      <link href="/2020/12/03/lun-wen-bi-ji-flexsc/"/>
      <url>/2020/12/03/lun-wen-bi-ji-flexsc/</url>
      
        <content type="html"><![CDATA[<h3 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h3><p>系统调用采用同步的机制，在用户态转移到内核态的过程中，需要把当前上下文保存，但是其中的模式切换成本，与间接的处理器上下文数据污染（影响局部性 <em>locality</em>），会对系统调用造成比较大的负面影响</p><p><img src="https://i.loli.net/2020/12/20/5jrZnDoWebTua9s.png" alt="image.png" /></p><p>文中给出的 <em>proposal</em> : <em><strong>exception-less system call</strong></em>，在请求内核服务时，不需要使用同步处理器异常。实现过程中，(<em>invocation stage</em>)系统调用通过把内核请求，以普通的内存存储操作写入到一个预留的系统调用页 (<em>syscall page</em>)。(<em>execution stage</em>)随后的系统调用执行采用 <strong>异步</strong> 的方式 (<em>special in-kernel <strong>syscall threads</strong></em>) ，将结果异步载入 <em>syscall page</em></p><p>从上可以看出，它其实是把 <strong>invocation</strong> 和 <strong>execution</strong> 解耦。一方面可以在执行流上保证<u>时间的局部性</u>；另一方面能够让 <em>syscall</em> 独立运行在一个core上，与 <em>user mode threads</em> 隔离，保证每一个core内的<u>空间局部性</u></p><p>与此同时，有一个很关键的 <strong>动态核特化</strong> (<em>dynamic core specialization</em>)概念——也就是core可以根据当前OS的<em>workload</em>，动态调整某一个core是进行用户态 / 内核态的工作。为了减轻编程负担，给出了一个 <em><strong>M-on-N</strong></em> 的线程模型(<em>M</em>个用户态线程，执行于 <em>N</em> 个内核可见的线程) 。关于POSIX线程模型，参见<a href="https://www.yuque.com/barret/giv6pv/ogmd8f">POSIX线程模型</a></p><h3 id="2-cost-of-system-call"><a class="markdownIt-Anchor" href="#2-cost-of-system-call"></a> 2. cost of system-call</h3><h4 id="21-模式切换cost"><a class="markdownIt-Anchor" href="#21-模式切换cost"></a> 2.1 模式切换cost</h4><p>时间损耗发生于：用户态下必要的syscall调用、执行权转交给内核的执行、执行权反交给用户态。现代处理器通过处理器异常来做这个模式切换，切换时会将用户模式下的指令流水线清空、将CPU上下文保存入栈、改变 <em>protection domain</em>、重定向到异常处理<em>handler</em></p><blockquote><p>这里对 <em>protection domain</em> 不是特别理解，详见 <a href="https://zhuanlan.zhihu.com/p/59796446">Lampson: Protection Models</a>。可以和chcore中的pmo-cap关联起来看，个人理解为一个资源的句柄域，由于内核态和用户态的 <em>domain</em> 不同(可以使用的资源范围)，故需要在这里进行<em>domain</em> 的改变</p></blockquote><h4 id="22-系统调用cost"><a class="markdownIt-Anchor" href="#22-系统调用cost"></a> 2.2 系统调用cost</h4><p>处理器状态污染：</p><p>进入内核态执行时，处理器的L1缓存数据、指令缓存、TLB、分支预测表，以及L2缓存，都会因为系统调用而被污染，从而在返回用户态之后，极大地影响用户态程序执行速度</p><p><img src="https://i.loli.net/2020/12/20/vfRDmGitJOsWB6F.png" alt="image.png" /></p><h4 id="23-返回用户态执行cost"><a class="markdownIt-Anchor" href="#23-返回用户态执行cost"></a> 2.3 返回用户态执行cost</h4><blockquote><p>衡量指标：IPC (<em>instructions per cycle</em>)</p></blockquote><p>理想状态下，用户模式下的<em>IPC</em> 应当不变化。但是实际实验中，有如下的几个影响因素。</p><p><strong>直接影响</strong>：系统调用关联的异常，将处理器执行流水线清空</p><p><strong>间接影响</strong>：处理器状态污染</p><img src="https://i.loli.net/2020/12/20/vFbzLq7xU2ZRiAH.png" alt="image.png" style="zoom: 67%;" /><p>实验结果解读：</p><ol><li>横轴表示syscall的一个频率，纵轴表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mfrac><mrow><mi>I</mi><mi>P</mi><msub><mi>C</mi><mrow><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi></mrow></msub></mrow><mrow><mi>I</mi><mi>P</mi><msub><mi>C</mi><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">1-\frac{IPC_{user}}{IPC_{base}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.3392909999999998em;vertical-align:-0.4508599999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884309999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.07153em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.07153em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4508599999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。从这里可以看出，在per-1K条指令一次系统调用的情况下，会造成比较大的损耗。</li><li>使用空的syscall来评估系统调用带来的 <em>direct</em> 影响，使用一个 <em>pwrite</em> 调用来评估系统调用带来的 <em>indirect</em> 影响。可以看出，在syscall频繁的时候(1K)，直接影响占据主导；而当syscall不频繁时，间接影响占据主导</li></ol><p>IPC受syscall频率的影响。可以见到，当系统调用频繁时，内核的状态也能够比较好地被保持。由此看出syscall对 user / kernel mode均会造成局部性的影响</p><img src="https://i.loli.net/2020/12/20/qDFpQv7kRSaLEnd.png" alt="image.png" style="zoom:67%;" /><h3 id="3-exception-less-system-call"><a class="markdownIt-Anchor" href="#3-exception-less-system-call"></a> 3. Exception-Less system call</h3><blockquote><p>提供灵活的系统调用执行调度，进而提升用户 / 内核态下的局部性</p></blockquote><p>在两个方面下功夫：</p><ul><li><em>System call batching</em> : 延缓systemcall的执行，让他们以一个batch来一起执行</li><li><em>Core specialization</em> : 内核特化，<em>execution</em> / <em>invoke</em> 分开于不同的core上执行</li></ul><h4 id="31-exception-less-syscall接口"><a class="markdownIt-Anchor" href="#31-exception-less-syscall接口"></a> 3.1 Exception-Less syscall接口</h4><p>通过一个 user-kernel共享的内存页支持(<em>syscall page</em>)，包含了syscall入口，关联到请求状态、系统调用号、入参、出参</p><p>在调用一个exception-less syscall，用户态的线程会找到 <em>syscall page</em>内的一个空闲<em>entry</em>，将系统调用相关的数据写入。之后用户态线程可以继续执行，不被中断。用户线程后续会读取<em>entry</em>中的执行状态，校验系统调用是否已经完成。这些操作中，用户线程不需要通过<em>exception</em></p><p><em>syscall page</em> 中的每一个<em>entry</em> 结构如下：</p><blockquote><p>64-bit系统中，每一个 <em>entry</em> 占用 <strong>64 bytes</strong></p></blockquote><p><img src="https://i.loli.net/2020/12/20/Nv5WgtnKT8qSreu.png" alt="image.png" /></p><p>在调用 <em>exception-less syscall</em> 时，用户线程需要找到一个 <em>status = free</em> 的 <em>entry</em>，随后将必要的参数写入到这个入口。写入完成后，<em>status</em> 置为 <em>submitted</em> 。随后用户线程可以执行自己的代码，后续需要check这个<em>status</em> 是否为 <em>done</em>，表明系统调用是否完成。若完成，那么用户线程设置 <em>status</em> 为 <em>free</em></p><blockquote><p><mark>Question</mark> : 这里会不会有并发问题？ 当一个线程正在write argument，另一个用户线程发现 <em>status = free</em>，那么也会进行write argument。这时候会有race ？</p></blockquote><h4 id="32-执行-调用解耦"><a class="markdownIt-Anchor" href="#32-执行-调用解耦"></a> 3.2 执行、调用解耦</h4><p>不同于 <em>exception-based syscall</em> ，<em>exception-less syscall</em> 采用一种 <strong>异步</strong> 的策略，调用时，用户线程写入 <em>syscall page</em>；执行<em>syscall</em> 时，<em><strong>syscall thread</strong></em> (必在内核态) 从 <em>syscall page</em> 拉取系统调用请求</p><img src="https://i.loli.net/2020/12/20/2F4gn3JqKUo1pGX.png" alt="image.png" style="zoom:80%;" /><ul><li>用户线程只在无法进行更多的执行，才会唤醒系统调用线程(<em>syscall thread</em>) ——保证时间局部性</li><li>系统调用线程可以被调度——保证空间局部性</li></ul><h4 id="33-flexsc"><a class="markdownIt-Anchor" href="#33-flexsc"></a> 3.3 FlexSC</h4><blockquote><p><em>exception-less syscall</em> 的具体实现实践</p></blockquote><p>给出两个新的linux系统调用：</p><ul><li><strong>flexsc_register()</strong></li></ul><p>在进程初始化的时候<strong>显式</strong>调用，是 <em>exception-based</em> 的。由于只需要执行一次，对性能的影响可以忽略</p><p>这个系统调用做了两件事：将若干 <em>syscall pages</em> 映射至用户虚存空间、为每一个 <em>entry</em> 产生一个 <em>syscall thread</em></p><ul><li><strong>flexsc_wait()</strong></li></ul><p>对于传统的同步系统调用，用户线程只需要简单地进行 <em>sleep</em> ，等待<em>syscall</em> 执行完毕。当前的执行模式中，用户线程会显示地与内核 <em>communicate</em>，告知自己无法进行进一步的执行，直到调用的<em>syscall</em> 已经完成。这一个函数调用是 <em>exception-based</em> ，调用过后能够在至少一个syscall完成后，唤醒用户空间的线程</p><h4 id="34-syscall-thread"><a class="markdownIt-Anchor" href="#34-syscall-thread"></a> 3.4 syscall thread</h4><p>之前说到，<strong>syscall thread</strong> 从 <em>syscall pages</em> 拉取请求。</p><p>在 <em>flexsc_register()</em> 阶段，<em>syscall thread</em> 从注册的进程中克隆得到，他们也就拥有相同的虚拟地址空间。这一点能够让后续的数据迁移变得容易(不需要重新定义虚存映射)</p><p>针对每一个entry，都会在kernel mode创建一个 <em>syscall thread</em>。但是只有一个 <em>syscall thread</em> (per core) 是处于active状态。当系统调用线程需要立即阻塞时，FlexSC会notify工作队列，使另一个线程wake up，立即开始执行下一个 <em>syscall</em>。 当资源空闲时，当前的Linux代码会唤醒等待的线程，并恢复其执行</p><h4 id="35-syscall-thread调度器"><a class="markdownIt-Anchor" href="#35-syscall-thread调度器"></a> 3.5 syscall thread调度器</h4><p>单核：</p><p>调度器假设用户空间会尝试调用尽可能多的<em>syscall</em>，调度器随后会唤醒其中的一个空闲 <em>syscall thread</em>，用来执行第一个 <em>syscall</em>。</p><ul><li>如果这个系统调用不会被阻塞，那么当前的 <em>syscall thread</em> 会继续执行下一个 <em>syscall</em></li><li>如果会被阻塞，那么阻塞时，调度器会唤醒下一个 <em>syscall thread</em>，来执行下一个系统调用</li></ul><p>调度器不会唤醒用户线程，直到所有的系统调用已经被 <em>issued</em>，</p><p>多核：</p><p>通过尝试使用预定义的静态core list调度。</p><ul><li>选择<em>list</em>中的第一个核，如果某个进程的系统调用线程当前正在该核上运行，则选择列表中下一个核</li><li>如果所core当前未执行系统调用线程，则将处理器间中断发送到core，以表明它必须唤醒系统调用线程</li></ul><p>每一个core上只能同时运行一个进程的<em>syscall thread</em>，但是之前的问题也提到了一个并发竞争问题。这里通过对 page 加锁来避免并发的问题，直到所有 <em>submitted</em> 系统调用请求都被发出了才进行解锁</p><h3 id="4-flexsc-threads"><a class="markdownIt-Anchor" href="#4-flexsc-threads"></a> 4. FlexSC - Threads</h3><p><em>Exception-less syscall</em> 更加类似于 <strong>事件驱动</strong> 模型，能够让IO相关的操作在未来执行，并且能够请求、验证完成、处理任何系统调用</p><p>文中着重探讨了实现 <em><strong>FlexSC-Threads</strong></em>，一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>−</mo><mi>o</mi><mi>n</mi><mo>−</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">M-on-N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 线程模型。依赖于仅在用户空间中进行线程切换的能力，来让同步系统调用透明地转变为 <em>exception-less syscall</em>。</p><p><em>FlexSC-Threads</em> 工作流程如下：</p><ol><li>将每个libc调用重定向到我们的库。 通常应用程序不直接嵌入代码以发出系统调用，而是在<strong>动态加载</strong>的libc中调用包装器，故采用Linux的动态加载功能将此类调用的执行重定向到我们的库</li><li>随后将对应的 <em>exception-less syscall</em> 写入到 <em>syscall page</em>，切换至另一个就绪的用户线程</li><li>如果没有就绪用户线程，那么<em>FlexSC</em>检查那些 <em>status = completed</em> 的 <em>syscall page</em>，将对应的线程唤醒，来获取系统调用完成后的<em>result</em></li><li>当所有的用户线程都等待系统调用，FlexSC Thread lib将调用<strong>flexsc_wait()</strong>，使内核可见线程进入睡眠状态，直到一个挂起的系统调用完成。</li></ol><p>多核环境下的每一个进程，为每一个core建立一个内核可见线程</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊一致性的话题</title>
      <link href="/2020/04/09/liao-yi-liao-yi-zhi-xing-hua-ti/"/>
      <url>/2020/04/09/liao-yi-liao-yi-zhi-xing-hua-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="主从复制"><a class="markdownIt-Anchor" href="#主从复制"></a> 主从复制</h2><p>在分布式的 <em>CAP</em> 理论中，一致和可用我们往往都只能够偏向于其中的一者。这一点这里只是简单提一下。例如我们的 <code>zk</code>满足的就是 <em>CP</em></p><p><img src="https://i.loli.net/2020/12/20/AlHwGEiLrFCS4VY.png" alt="image.png" /></p><p>今天主要谈一谈数据库当中的一个 <strong>一致性</strong> 话题</p><h3 id="mysql-主从复制"><a class="markdownIt-Anchor" href="#mysql-主从复制"></a> Mysql 主从复制</h3><blockquote><p>在分布式的数据库系统中，如果主数据库发生了故障，那么需要能够及时切换到从数据库，并且进行数据的恢复工作。如何保证主从数据库之间的数据一致性也就成为了焦点问题。这次把目光聚焦在 <code>Mysql</code> 上，探究它的主从复制原理</p><p>对于这些数据库而言，严格的一致性是一个目标</p></blockquote><p><img src="https://i.loli.net/2020/04/09/e7iz9aotfqmlGHM.png" alt="image.png" /></p><ul><li>主节点 <code>Master</code> 进行数据更新之后，会将更新日志写入 <code>binlog</code> 当中。此时创建的是第一个线程 <code>binlong dump thread</code></li><li>随后从节点 <code>Slave</code>发起连接，连接到 <code>Master</code> ，从节点启东之后，启动线程 <code>IO thread</code> ，用于将 <code>binlog</code> 内容写入到从节点的 <code>relay log</code></li><li>从节点随后创建 <code>SQL thread</code> ，用于从 <code>relay log</code> 中读取内容，并且开始进行写入操作</li></ul><h3 id="redis-主从复制"><a class="markdownIt-Anchor" href="#redis-主从复制"></a> Redis 主从复制</h3><blockquote><p>其主要的目的和 <code>Mysql</code> 一致，都是为了避免主节点失效之后的数据备份</p></blockquote><h4 id="完整复制过程"><a class="markdownIt-Anchor" href="#完整复制过程"></a> 完整复制过程</h4><ul><li>启动 <code>Slave</code> ，建立和主节点 <code>Master</code> 的连接，发送 <code>sync</code> 命令</li><li><code>Master</code> 启动一个后台进程，将当前的快照存储到 <code>RDB</code>当中<ul><li>写入 <code>RDB</code> 的同时，可能会有数据的不一致性。这时候 <code>Master</code> 主进程会把写命令缓存</li></ul></li><li><code>Master</code> 发送 <code>RDB</code> 给 <code>Slave</code> ，随后 <code>Slave</code> 进行磁盘保存</li><li><code>Slave</code> 加载 <code>RDB</code> 文件到内存恢复；</li><li><code>Master</code> 发送缓存给 <code>Slave</code></li></ul><blockquote><p>存在的问题：</p><p>如果 <code>Slave</code> 停止运行，再次运行的时候可能部分的数据不同步；这时候的全数据恢复会非常耗时</p></blockquote><h4 id="部分复制过程"><a class="markdownIt-Anchor" href="#部分复制过程"></a> 部分复制过程</h4><ul><li><code>Slave</code> 连接 <code>Master</code> 之后，会主动发起 <code>PSYNC</code> 命令，<code>Slave</code> 提供 <code>runid</code> , <code>offset</code> 。如果 <code>Master</code> 认定无效，那么进行完整复制；否则根据  <code>offset</code> 进行部分数据的同步</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自己动手实现负载均衡算法</title>
      <link href="/2020/04/02/rang-wo-men-shi-xian-yi-xie-fu-zai-jun-heng-suan-fa/"/>
      <url>/2020/04/02/rang-wo-men-shi-xian-yi-xie-fu-zai-jun-heng-suan-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h4><p>最近在看 <code>dubbo</code> ，它的服务治理当中有很大一个方面讲的就是负载均衡。由于我们的服务提供者可以有多个 <code>replication</code> ，究竟选择哪一个比较合适，就成为了我们需要去思考的一个问题。完全出于兴趣使然，我打算动手实现一下常见的负载均衡算法，来让自己加深一下理解。根据一个非常常见的请求调用，以参数作为请求内容，来判定多个备用选项中的选择策略制定</p><p>设计了类 <code>Provider</code> 和 <code>Consumer</code> ，分别表示服务提供者和消费者。由消费者进行触发，来选取 <code>N</code> 个服务提供者的负载均衡策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Entity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;                <span class="comment">//id信息</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> weight;            <span class="comment">//价值权重</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> milliseconds;        <span class="comment">//响应时间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Provider</span><span class="params">(String id,  <span class="keyword">double</span> weight, <span class="keyword">long</span> milliseconds)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.weight = weight;</span><br><span class="line"><span class="keyword">this</span>.milliseconds = milliseconds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> weight)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.weight = weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getMilliseconds</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> milliseconds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMilliseconds</span><span class="params">(<span class="keyword">long</span> milliseconds)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.milliseconds = milliseconds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">&quot;id:%s\tweight:%f\tlatency:%d&quot;</span>,</span><br><span class="line">id, weight, milliseconds);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lru算法"><a class="markdownIt-Anchor" href="#lru算法"></a> LRU算法</h4><p>如下是我的实现策略，内部维护一个 <code>lruQueue</code> 队列，队头表示最少访问的节点，当访问某一个节点之后，直接把这个节点移动到队尾即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最近最少使用优先</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LruHandler</span> <span class="keyword">implements</span> <span class="title">BalanceHandler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Queue&lt;Provider&gt; lruQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> providerCnt =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(List&lt;Provider&gt; providerList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.providerCnt = providerList.size();</span><br><span class="line">lruQueue.addAll(providerList);</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">this</span>.providerCnt &gt;= <span class="number">1</span>;</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;Start choosing from all of the %d providers&quot;</span>, <span class="keyword">this</span>.providerCnt));</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//choose random first</span></span><br><span class="line">Random ran = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> idx = ran.nextInt(<span class="keyword">this</span>.providerCnt - <span class="number">1</span>);</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;Choose provider %d&quot;</span>, idx));</span><br><span class="line"><span class="comment">//choose idx and move it to</span></span><br><span class="line">Provider chosenP = providerList.get(idx);</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;The provider infomation is %s&quot;</span>, chosenP.toString()</span><br><span class="line">));</span><br><span class="line">lruQueue.remove(chosenP);</span><br><span class="line">lruQueue.offer(chosenP);</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;The current queue:%s&quot;</span>, queueToStr()));</span><br><span class="line">System.out.println(<span class="string">&quot;============================================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">queueToStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (Provider p : <span class="keyword">this</span>.lruQueue) &#123;</span><br><span class="line">sb.append(p.getId()).append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="随机选取算法"><a class="markdownIt-Anchor" href="#随机选取算法"></a> 随机选取算法</h4><p>这一个随机化的选取算法主要采取了 <code>weight</code> 来进行权重排序，其实 <code>Dubbo</code> 里面基于最少活跃度的算法，也是一个特定的优先级队列。这些基于优先级队列的负载均衡算法，直接可以根据权值排序就能够得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机加权选取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomWeightHandler</span> <span class="keyword">implements</span> <span class="title">BalanceHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(List&lt;Provider&gt; providerList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = providerList.size();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;The pre queue:%s&quot;</span>, queueToStr(providerList)));</span><br><span class="line"><span class="comment">// change all of the provider weight</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">Provider en = providerList.get(i);</span><br><span class="line">en.setWeight(<span class="keyword">new</span> Random().nextDouble());</span><br><span class="line">providerList.set(i, en);</span><br><span class="line">&#125;</span><br><span class="line">providerList.sort((o1, o2) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (o1.getWeight() &lt; o2.getWeight()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line">Provider p = providerList.get(<span class="number">0</span>);</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;The provider information is %s&quot;</span>, p.toString()));</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;The current queue:%s&quot;</span>, queueToStr(providerList)));</span><br><span class="line">System.out.println(<span class="string">&quot;========================================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">queueToStr</span><span class="params">(List&lt;Provider&gt; queue)</span> </span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (Provider p : queue) &#123;</span><br><span class="line">sb.append(p.getId()).append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-基本数据结构</title>
      <link href="/2020/03/24/redis-ji-ben-shu-ju-jie-gou/"/>
      <url>/2020/03/24/redis-ji-ben-shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="redis-基本数据结构"><a class="markdownIt-Anchor" href="#redis-基本数据结构"></a> Redis 基本数据结构</h2><blockquote><p><em>Redis</em> 的数据类型有五大类，分别是 <strong>列表、字符串、哈希表、有序集合、无序集合</strong></p><p>字符串底层：SDS</p><p>列表底层：链表或者是 <em>ziplist</em> 压缩列表</p><p>哈希对象：ziplist 或者是 hashtable</p><p>集合：<em>intset</em> 或 <em>hashtable</em></p><p>有序集合：<em>ziplist</em> 或 <em>skiplist &amp; dictionary</em></p></blockquote><p>底层的数据结构实现讲解</p><h3 id="简单动态字符串-sds"><a class="markdownIt-Anchor" href="#简单动态字符串-sds"></a> 简单动态字符串 SDS</h3><h4 id="涉及数据结构"><a class="markdownIt-Anchor" href="#涉及数据结构"></a> 涉及数据结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// buf 中已占用空间的长度</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buf 中剩余可用空间的长度</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据空间</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="空间预加载策略"><a class="markdownIt-Anchor" href="#空间预加载策略"></a> 空间预加载策略</h4><p>当我们进行 <code>sdscat(sds s1 , const char* t)</code> 的时候，<strong>可能</strong> 会引发空间重新分配</p><ul><li>如果 <strong>free space</strong> 足够，那么不进行分配</li><li>如果不够，看 <strong>t</strong> 的大小是不是超过 1M (<code>SDS_MAX_PREALLOC</code>- <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1024</mn><mo>×</mo><mn>1024</mn></mrow><annotation encoding="application/x-tex">1024\times 1024</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span></span></span></span>)<ul><li>超过 <strong>1M</strong> ，直接 <code>newLen + SDS_MAX_PREALLOC</code></li><li>否则 <code>newLen = newLen * 2</code></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sds <span class="title">sdsMakeRoomFor</span><span class="params">(sds s, <span class="keyword">size_t</span> addlen)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> *<span class="title">sh</span>, *<span class="title">newsh</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 s 目前的空余空间长度</span></span><br><span class="line">    <span class="keyword">size_t</span> <span class="built_in">free</span> = sdsavail(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> len, newlen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// s 目前的空余空间已经足够，无须再进行扩展，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">free</span> &gt;= addlen) <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 s 目前已占用空间的长度</span></span><br><span class="line">    len = sdslen(s);</span><br><span class="line">    sh = (<span class="keyword">void</span>*) (s-(<span class="keyword">sizeof</span>(struct sdshdr)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// s 最少需要的长度</span></span><br><span class="line">    newlen = (len+addlen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据新长度，为 s 分配新空间所需的大小</span></span><br><span class="line">    <span class="keyword">if</span> (newlen &lt; SDS_MAX_PREALLOC)</span><br><span class="line">        <span class="comment">// 如果新长度小于 SDS_MAX_PREALLOC </span></span><br><span class="line">        <span class="comment">// 那么为它分配两倍于所需长度的空间</span></span><br><span class="line">        newlen *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC</span></span><br><span class="line">        newlen += SDS_MAX_PREALLOC;</span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    newsh = zrealloc(sh, <span class="keyword">sizeof</span>(struct sdshdr)+newlen+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存不足，分配失败，返回</span></span><br><span class="line">    <span class="keyword">if</span> (newsh == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新 sds 的空余长度</span></span><br><span class="line">    newsh-&gt;<span class="built_in">free</span> = newlen - len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 sds</span></span><br><span class="line">    <span class="keyword">return</span> newsh-&gt;buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空间懒释放策略"><a class="markdownIt-Anchor" href="#空间懒释放策略"></a> 空间懒释放策略</h4><p><code>sdstrim(sds s, const char*)</code> 会削减掉 <strong>s</strong> 两边的字符</p><p>去掉之后，我们不改变 <strong>len</strong> , 而是作为 <strong>free space</strong> 进行了保留</p><h4 id="二进制安全"><a class="markdownIt-Anchor" href="#二进制安全"></a> 二进制安全</h4><p>对于普通的 <strong>C</strong> 字符串，由于是按照空串 <code>\0</code> 来作为结束标志</p><p>而对于 <strong>SDS</strong> ，它使用的 <strong>len</strong> 字段就可以避免这一点</p><h3 id="链表"><a class="markdownIt-Anchor" href="#链表"></a> 链表</h3><p>基本的数据结构——双向链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 双端链表节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">prev</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的值</span></span><br><span class="line">    <span class="keyword">void</span> *value;</span><br><span class="line"></span><br><span class="line">&#125; listNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 双端链表迭代器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listIter</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// **当前**迭代到的节点</span></span><br><span class="line">    listNode *next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代的方向</span></span><br><span class="line">    <span class="keyword">int</span> direction;</span><br><span class="line"></span><br><span class="line">&#125; listIter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 双端链表结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表头节点</span></span><br><span class="line">    listNode *head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表尾节点</span></span><br><span class="line">    listNode *tail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点值复制函数</span></span><br><span class="line">    <span class="keyword">void</span> *(*dup)(<span class="keyword">void</span> *ptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点值释放函数</span></span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">free</span>)(<span class="keyword">void</span> *ptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点值对比函数</span></span><br><span class="line">    <span class="keyword">int</span> (*match)(<span class="keyword">void</span> *ptr, <span class="keyword">void</span> *key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链表所包含的节点数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len;</span><br><span class="line"></span><br><span class="line">&#125; <span class="built_in">list</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出，<strong>Redis</strong>中的list采取了双端链表来进行实现。结构体内部包含了：</p><ul><li>头结点、尾结点</li><li>链表长度</li><li>三个支持多态的函数指针</li></ul><h3 id="字典-hash"><a class="markdownIt-Anchor" href="#字典-hash"></a> 字典 hash</h3><p>Redis中称作 <strong>字典</strong>。它的实现上都是采取了 <strong>链地址法</strong> 的哈希表结构。</p><blockquote><p><em>redis</em> 后续还引入了 <em>zipmap</em> 来作为 <code>字符串到字符串</code>的小<em>hash</em> 底层数据结构</p></blockquote><h3 id="主要数据结构"><a class="markdownIt-Anchor" href="#主要数据结构"></a> 主要数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 哈希表节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 键</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 值</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="keyword">void</span> *val;</span><br><span class="line">        <span class="keyword">uint64_t</span> u64;</span><br><span class="line">        <span class="keyword">int64_t</span> s64;</span><br><span class="line">    &#125; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指向下个哈希表节点，形成链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125; dictEntry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 哈希表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 每个字典都使用**两个**哈希表，从而实现渐进式 rehash 。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 哈希表数组</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表大小</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 哈希表大小掩码，用于计算索引值</span></span><br><span class="line">    <span class="comment">// 总是等于 size - 1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该哈希表已有节点的数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line"></span><br><span class="line">&#125; dictht;</span><br><span class="line"><span class="comment">//=======================================</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 字典</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型特定函数</span></span><br><span class="line">    dictType *type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有数据</span></span><br><span class="line">    <span class="keyword">void</span> *privdata;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表</span></span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rehash 索引</span></span><br><span class="line">    <span class="comment">// 当 rehash 不在进行时，值为 -1</span></span><br><span class="line">    <span class="keyword">int</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目前正在运行的安全迭代器的数量</span></span><br><span class="line">    <span class="keyword">int</span> iterators; <span class="comment">/* number of iterators currently running */</span></span><br><span class="line"></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><p>可以看出，<strong>Entry</strong> 作为节点，维护了 <code>K,V</code> 关系；哈希表维护了基本的<strong>哈希表大小</strong>和<strong>已占用Hash数量</strong>。</p><h4 id="哈希算法"><a class="markdownIt-Anchor" href="#哈希算法"></a> 哈希算法</h4><p>根据 <code>hashFunc(key)</code> 可以得到哈希值 <strong>hash</strong> 。但是这个值往往很大，需要规整到 <code>[0,size-1]</code> 范围内，所以我们使用 <code>hash &amp; mask</code> 来进行 <strong>模计算</strong>。这里的 <strong>mask</strong> 为 <code>size - 1</code></p><h5 id="再哈希"><a class="markdownIt-Anchor" href="#再哈希"></a> 再哈希</h5><blockquote><p>大多数的哈希表实现思路类似——<strong>size</strong>都需要是 <strong>2的幂次</strong>，便于进行和掩码的与运算</p></blockquote><p><code>dict</code> 结构中，采用了 <code>dictht ht[2];</code> 两个哈希表来进行。一般 <code>ht[0]</code> 存储数据，当要进行再哈希的时候，先给 <code>ht[1]</code> 分配一定的空间，随后把 <code>ht[0]</code> 的数据再哈希到 <code>ht[1]</code> 当中。完成之后，释放 <code>ht[0]</code> 空间，调换两个指针 (类似<em>JVM</em> <em>survivor0，1</em> 的拷贝)</p><ul><li>如果进行的是扩展操作，那么<em>rehash</em> 之后的大小是 大于等于 <code>ht[0].used * 2</code> 的第一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>  (和 <em>Java</em>的实现有点区别，<em>redis</em> 这里是针对已经使用的大小乘以二，然后再找到不小于这个数的第一个二的次幂)</li><li>如果是伸缩操作，那么 <em>rehash</em> 之后的大小是 大于等于  <code>ht[0].used</code> 的第一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></li></ul><p>随后，我们进行一个再哈希 (也就是根据新的大小重新分配 <code>K,V</code> ) ，放置到 <code>ht[1]</code>。随后互换两者指针即可。</p><h5 id="渐进式再哈希"><a class="markdownIt-Anchor" href="#渐进式再哈希"></a> 渐进式再哈希</h5><p>再哈希时的数据拷贝工作是最耗时的。Redis 采用 <strong>rehashidx</strong> 来进行渐进式的处理。</p><ul><li>初始值设置为0，表示再哈希开始</li><li>每一次对哈希表的增删改查，都会随即触发再哈希。<ul><li>仅仅再哈希 <strong>rehashidx</strong> 索引对应的节点</li><li>此时的增删改查涉及到两个哈希表</li></ul></li><li>完成所有的再哈希之后，设置为 -1，表示完成</li></ul><blockquote><p>通过将再哈希的行为，均摊到增删改查当中，避免了集中式的再哈希操作</p></blockquote><h3 id="集合"><a class="markdownIt-Anchor" href="#集合"></a> 集合</h3><h4 id="跳表有序集合key的底层实现"><a class="markdownIt-Anchor" href="#跳表有序集合key的底层实现"></a> 跳表——有序集合key的底层实现</h4><blockquote><p>使用于有序集合元素数量大，或者元素成员是字符串类型</p><p>跳表还使用在了集群节点中的内部数据结构</p></blockquote><h5 id="跳表节点定义"><a class="markdownIt-Anchor" href="#跳表节点定义"></a> 跳表节点定义</h5><p>每一个节点内部，除了基本的数据 <code>robj</code> ，还包含了后退指针，以及一个 <code>level</code> 数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员对象</span></span><br><span class="line">    robj *obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分值</span></span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后退指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 层</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前进指针</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跨度</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> span;</span><br><span class="line"></span><br><span class="line">    &#125; level[];</span><br><span class="line"></span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure><h5 id="跳表定义"><a class="markdownIt-Anchor" href="#跳表定义"></a> 跳表定义</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表头节点和表尾节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">header</span>, *<span class="title">tail</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表中节点的数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表中层数最大的节点的层数</span></span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line"></span><br><span class="line">&#125; zskiplist;</span><br></pre></td></tr></table></figure><p>几个要点：</p><ul><li><code>level</code> 表示层，当有新的跳跃表节点 <em>insert</em> ，<strong>level</strong> 将会是 <code>[1,32]</code>之间的一个随机值<ul><li>层的 <strong>跨度</strong> <code>level[i].span</code>，主要用于计算 <strong>rank</strong>。</li><li>对于某一个需要查询的节点，头结点到它的<strong>跨度累积值</strong>就是它的 <strong>rank</strong></li></ul></li><li>前进指针和后退指针都是用于 <strong>遍历</strong></li><li>成员和分值<ul><li>跳表内部按照分值由小到大来进行组织——从这一点上看，分值大的一般 <strong>rank</strong> 也大</li><li>分值可以重复，成员不可以</li></ul></li></ul><p><em>redis</em> 中的 <strong>有序集合 zset</strong> 使用了一个跳表 + 一个字典来进行实现。通过跳表来进行 <em>rank</em> 的从小到大排序，然后通过字典来实现对象到分值的一个映射。不会产生额外的数据空间浪费，并且能够让 <strong>遍历</strong> 和 <strong>获取对象分值</strong> 都能够有一个比较小的时间复杂度</p><h4 id="intset-整数集合"><a class="markdownIt-Anchor" href="#intset-整数集合"></a> Intset 整数集合</h4><blockquote><p>用于集合键的底层实现之一，如果集合只包含整数，并且数量不多，就采用整数集合来进行实现</p></blockquote><h5 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编码方式</span></span><br><span class="line">    <span class="keyword">uint32_t</span> encoding;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 集合包含的元素数量</span></span><br><span class="line">    <span class="keyword">uint32_t</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存元素的数组, 按照升序进行排列</span></span><br><span class="line">    <span class="keyword">int8_t</span> contents[];</span><br><span class="line"></span><br><span class="line">&#125; intset;</span><br></pre></td></tr></table></figure><p>关注：</p><ul><li>编码方式决定了 <strong>contents[]</strong> 数组的元素的大小</li><li>插入操作：<ul><li>为了维护 <strong>升序</strong>关系，插入的时间复杂度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span> ——这里其实可以优化</li><li>若出现了大小超过编码的，需要进行 <strong>升级</strong></li><li>不支持 <strong>降级</strong></li></ul></li></ul><h3 id="ziplist-压缩列表"><a class="markdownIt-Anchor" href="#ziplist-压缩列表"></a> Ziplist 压缩列表</h3><blockquote><p>可以用于基本的列表数据结构；也可以用于哈希字典 (键和值相邻排放) ，同时也是有序集合的底层实现之一。一般用于存储少量的列表项，并且列表项是一些小整数或小字符串</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合</title>
      <link href="/2020/03/14/java-ji-he/"/>
      <url>/2020/03/14/java-ji-he/</url>
      
        <content type="html"><![CDATA[<h2 id="java-集合类整理"><a class="markdownIt-Anchor" href="#java-集合类整理"></a> Java 集合类整理</h2><blockquote><p><em>JDK</em> 版本 <strong>1.8</strong></p><p>本文章就最近看的一些jdk源码来进行总结，可能会比较简洁</p></blockquote><h3 id="1-list-大类"><a class="markdownIt-Anchor" href="#1-list-大类"></a> 1. List 大类</h3><p>主要包含了 <strong>ArrayList , Vector , LinkedList</strong></p><h4 id="11-arraylist"><a class="markdownIt-Anchor" href="#11-arraylist"></a> 1.1 ArrayList</h4><blockquote><p>基本思想：</p><ul><li>默认大小为 10 ，初始化的时候不进行对象数组空间分配，直到第一次 <code>add(E e)</code></li><li>缓冲区满才进行扩容。扩容策略采取 <em>OldCapacity</em> * 1.5</li><li><code>remove</code> 不进行容量调整 (会有浪费)</li></ul></blockquote><p>关键代码部分 <code>grow(int minCapacity)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据之前计算得到的 <code>minCapacity</code> , 进行 <code>ArrayList</code> 的扩容操作。如果计算得到的容量大于了 <code>MAX_ARRAY_SIZE = INT_MAX - 8</code> ，那么会直接扩容到 <code>Integer.MAX_VALUE</code></p><blockquote><p>这里的 <code>MAX_ARRAY_SIZE</code> 设置为 <code>INT_MAX - 8</code> 主要是为了考虑到，有一些<em>JVM</em> 的对象数组 (这里是 <code>Object[] elementData</code>) 会采取一定长度的 <em>header</em> 。如果直接设置为 <code>INT_MAX</code> 可能会引发 OOM</p></blockquote><p>此外，可以看出 <code>ArrayList</code> 扩容其实是采取了复制的方法，将原来空间的所有数据放到了另一块空间。这种做法其实在复制上消耗特别大</p><h4 id="12-vector"><a class="markdownIt-Anchor" href="#12-vector"></a> 1.2 Vector</h4><blockquote><p>基本思想：</p><ul><li>和 <code>ArrayList</code> 颇为类似，它也是以10作为初始容量，初始化不分配对象数组的空间</li><li>扩容采取  <em>OldCapacity</em> * 2</li><li><code>remove</code> 不进行容量调整</li><li>线程安全 <code>synchronized</code></li></ul></blockquote><p>核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                         capacityIncrement : oldCapacity);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的 <code>capacityIncrement</code> 是在初始化的时候可以额外指定的变量。如果指定了，那么就不进行乘以二扩容，而是每一次增加这个 <code>capacityIncrement</code> 变量</p></blockquote><h4 id="13-linkedlist"><a class="markdownIt-Anchor" href="#13-linkedlist"></a> 1.3 LinkedList</h4><blockquote><ul><li>双向链表</li><li>内部额外存储头结点和尾结点</li></ul></blockquote><h3 id="2-kv-大类"><a class="markdownIt-Anchor" href="#2-kv-大类"></a> 2. KV 大类</h3><h4 id="21-hashmap"><a class="markdownIt-Anchor" href="#21-hashmap"></a> 2.1 HashMap</h4><blockquote><p>面试里面最喜欢问的了，没有之一</p><p>主要几个流程：</p><ul><li><code>put</code></li><li><code>get</code></li><li><code>remove</code></li></ul><p>线程安全问题</p><ul><li>put的时候导致的多线程数据不一致<ul><li>两个线程前后写入，产生数据覆盖</li><li>成环问题</li></ul></li></ul><img src="https://i.loli.net/2020/03/14/2WzkGAQVg9Rnpou.png" alt="image.png" style="zoom:80%;" /></blockquote><p>基本数据结构：</p><ul><li><code>class Node&lt;K,V&gt;</code> 是桶节点和链表节点的基本数据结构</li><li><code>Node&lt;K,V&gt;[] table</code> 是哈希表内部的实现，其实就是 <strong>链表数组</strong></li></ul><h5 id="211-put-添加-kv-对"><a class="markdownIt-Anchor" href="#211-put-添加-kv-对"></a> 2.1.1 put 添加 K,V 对</h5><ol><li>计算 <code>key</code> 的 <code>hashcode</code> 值，将对象的 <code>hashcode</code> 进行高16位和低16位的异或操作。可以看到， <code>HashMap</code> 支持对 <code>null</code> 键的处理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> h;</span><br><span class="line"><span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>putValue</code> 主体部分</li></ol><p>在之前的 <code>hash</code> 获取之后，接下来一步就是进行哈希表的一个处理了，由于细节比较多，我直接在源代码里面加注释来解释了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">      <span class="comment">//如果tab没有初始化</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//resize进行空间分配.</span></span><br><span class="line">          n = (tab = resize()).length;</span><br><span class="line">      <span class="comment">//如果当前桶是空的 , 那么新建节点 , 直接插入</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//当前桶已经有节点 , 需要在后面进行插入</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">          <span class="comment">//对于桶的第一个节点 p , 如果插入的点和第一个点 p 一样</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">          <span class="comment">//如果是红黑树 , 就进行红黑树插入</span></span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="comment">//如果第一个节点不同 , 并且后面是链表</span></span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//遍历链表</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line"> <span class="comment">//遇到空节点 , 表示可以插入 (1.7进行头插 , 1.8 进行尾插)         </span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                      <span class="comment">//插入到尾端</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                      <span class="comment">//如果 binCount &gt;= 8 - 1 (链表长度为8) , 就把链表转红黑树</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                  <span class="comment">//如果遇到相同的节点</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e; <span class="comment">// p = p.next</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//如果这个键值对存在 , 就进行覆盖</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">      <span class="comment">//如果map大小大于了阈值 , 再次进行 resize</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>有几个细节要提及：</p><ul><li><code>1.8</code> 中 , 链表和红黑树是交替使用的。<ul><li>当链表长度达到了 <strong>8</strong> 之后，会转换为红黑树</li><li>当 <code>size</code> 是 <strong>6</strong> 之后，红黑树退化为链表</li><li>原因分析：<ul><li>红黑树<strong>平均</strong>查询效率 O(logN) , 链表 O(N) / 2。在长度是 <strong>8</strong> 的时候，红黑树时间复杂度为 3 , 链表是 <em>8 / 2 = 4</em> 。这时候使用红黑树是效率更高的。而另一边退化的阈值设置为 <strong>6</strong> , 主要是中间有一个 <strong>7</strong> 的 <em>gap</em> , 从而避免红黑树和链表直接的频繁切换</li><li>当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件</li></ul></li></ul></li></ul><p>这里还有一个重要的调用函数 <code>resize()</code> 需要看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cap 指的是哈希表中 , 链表数组的长度</span></span><br><span class="line"><span class="comment">// Thr 指的是键值对的个数</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//阈值更新 (也就是整个哈希表的可容纳大小)</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 如果旧有oldCap很大 , 就把阈值设置为 Integer.MAX_VALUE</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//DEFAULT_INITIAL_CAPACITY = 16</span></span><br><span class="line">          <span class="comment">//MAXIMUM_CAPACITY = 1 &lt;&lt; 30</span></span><br><span class="line">          <span class="comment">//如果 oldCap * 2 比 MAXIMUM_CAPACITY 小 , 那么阈值更新到 2 倍</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">// 把新的链表数组长度设置为原来的 KV 对个数</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="comment">// 对于初始化的情况</span></span><br><span class="line">  <span class="comment">// 数组长度设置 16</span></span><br><span class="line">  <span class="comment">// 阈值设置 0.75f * 16 = 12</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">//更新阈值 , 替换原有的哈希表. 数组长度为 newCap</span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">  <span class="comment">//如果不是初始化的情形 , 需要进行rehash</span></span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">//遍历数组每一个桶</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">              <span class="comment">//当前桶非空 , 需要进行rehash</span></span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="comment">//原有桶清空</span></span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                  <span class="comment">//如果只有一个节点 , 直接再次计算hash , 填入就可以</span></span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                  <span class="comment">//如果是红黑树 , 那么红黑树的 split</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="comment">//如果是链表</span></span><br><span class="line">                  <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                          <span class="comment">//获取next节点</span></span><br><span class="line">                            next = e.next;</span><br><span class="line">                          <span class="comment">// e 作为前驱节点 , 同时记录下头节点和尾节点</span></span><br><span class="line"><span class="comment">// 低若干位 , 和原来的一致</span></span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 插入到 loTail  , 进行尾插</span></span><br><span class="line">                              <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                      <span class="comment">//到这里 , 已经形成了单独的链表 </span></span><br><span class="line">                      <span class="comment">//如果是低位 , 那么直接重新插入到原来的桶</span></span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                      <span class="comment">//插入到高位桶</span></span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="22-hashtable"><a class="markdownIt-Anchor" href="#22-hashtable"></a> 2.2 HashTable</h4><blockquote><p>基本要点</p><ul><li>采用链表实现</li><li>线程安全 <code>synchronized</code></li><li>默认的 Capacity (链表数组长度)是 <strong>11</strong> , 装载因子 0.75f</li><li><em>index</em> 计算：<code>index = (hash &amp; 0x7FFFFFFF) % tab.length</code></li><li>头插</li><li>rehash的变化为 <code>newCapacity = (oldCapacity &lt;&lt; 1) + 1</code></li><li>KV 不可以为空</li></ul></blockquote><h4 id="23-linkedhashmap"><a class="markdownIt-Anchor" href="#23-linkedhashmap"></a> 2.3 LinkedHashMap</h4><p>这个类继承自 <code>HashMap</code>，内部维护了一个双向链表。这个链表可以决定迭代的遍历顺序</p><p>在添加新节点的时候，将新节点链接在<strong>内部双向链表的尾部</strong>。</p><p><code>accessOrder=true</code>的模式下,在<code>afterNodeAccess()</code>函数中，会将当前被访问到的节点e，移动至内部的双向链表的尾部。</p><blockquote><p>重点关注：afterNodeAccess()函数中，会修改modCount,因此当你正在accessOrder=true的模式下,迭代LinkedHashMap时，如果同时查询访问数据，也会导致fail-fast，因为迭代的顺序已经改变。</p></blockquote><h4 id="24-treemap"><a class="markdownIt-Anchor" href="#24-treemap"></a> 2.4 TreeMap</h4><blockquote><p>LinkedHashMap保证数据可以保持插入顺序</p><p>而如果我们希望Map可以保持key的大小顺序的时候，我们就需要利用TreeMap了</p></blockquote><p>内部采用了红黑树，并不是基于 <strong>hash</strong> 来进行实现的</p><h3 id="3-set-大类"><a class="markdownIt-Anchor" href="#3-set-大类"></a> 3. SET 大类</h3><h4 id="31-hashset"><a class="markdownIt-Anchor" href="#31-hashset"></a> 3.1 HashSet</h4><p>内部实现完全使用了 <code>HashMap</code></p><h4 id="32-treeset"><a class="markdownIt-Anchor" href="#32-treeset"></a> 3.2 TreeSet</h4><p>内部实现采用了 <code>TreeMap</code> ， 持有 <code>NavigableMap</code> 类型的引用</p><h3 id="4-线程安全大类"><a class="markdownIt-Anchor" href="#4-线程安全大类"></a> 4. 线程安全大类</h3><h4 id="41-concurrenthashmap"><a class="markdownIt-Anchor" href="#41-concurrenthashmap"></a> 4.1 ConcurrentHashMap</h4><blockquote><ul><li><em>Key , Value</em> 不可以为空</li><li>Hash计算如下 <code>(h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS</code></li><li>链表 &amp; 红黑树使用。链表进行尾插</li><li>链表和红黑树的临界值也是 <strong>8</strong></li></ul></blockquote><p>主要讲述一下和 <em>HashMap</em> 的不同</p><h5 id="node定义"><a class="markdownIt-Anchor" href="#node定义"></a> Node定义</h5><p>在 <em>ConcurrentHashMap</em> 中，<em>Value,next</em> 都设置为了 <code>volatile</code> 内存可见</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">        <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">                Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">          <span class="comment">//CAS控制</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                        table = tab = nt;</span><br><span class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    sizeCtl = sc;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>yield 和 sleep 的异同</strong></p><p>1）yield, sleep 都能暂停当前线程，sleep 可以指定具体休眠的时间，而 yield 则依赖 CPU 的时间片划分。</p><p>2）yield, sleep 两个在暂停过程中，如已经持有锁，则都不会释放锁资源。</p><p>3）yield 不能被中断，而 sleep 则可以接受中断。</p><p>在 <em>1.8</em> 之前，采用了 <strong>分段锁</strong> ； 而 <em>1.8</em> 中主要使用了 <strong>CAS</strong> 和 <strong>synchronized</strong> 来进行并发控制</p><p><strong>CAS</strong> 没什么能说的，主要看一下分段锁 <em>Segment</em></p><p>这是一种 <em>ReentrantLock</em>，段的结构和 <em>HashMap</em> 类似，也是数组 + 链表。每一个段包含了 <em>HashEntry</em> 数组。当要对这个数组进行修改的时候，必须要先获得对应的锁(<em>Get</em>不需要获取锁，因为共享变量设置为了 <code>volatile</code>，除非读到的值是空的才会加锁重读)</p><p><em>volatile</em> 底层使用了<strong>内存屏障</strong>来加以完成，实现对内存操作的顺序控制。</p><blockquote><p><em>ReentrantLock</em> 可重入锁，表示已经获取到这个资源的线程，可以再次进入。<em>Synchronized</em> 也是可以重入的。每一个线程进入一次，那么锁计数器+1.直到计数器为0的时候才释放</p><ul><li><em>ReentrantLock</em> 采用 <strong>JDK</strong> 实现；<em>Synchronized</em>则是 <strong>JVM</strong> 实现的</li><li><em>Synchronized</em> 底层使用监视器（管程）实现，管程的本质就是操作系统的 <em>Mutex Lock</em>，需要牵涉到用户态和核心态的切换。 优化之前，性能比可重入锁差；</li><li><em>1.6</em> 之后引入了<em>Synchronized</em> 轻量级锁和偏向锁，也是默认开启的。此外还有自适应自旋锁的优化</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmake学习笔记</title>
      <link href="/2020/02/18/cmake-xue-xi-bi-ji/"/>
      <url>/2020/02/18/cmake-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="cmake学习笔记"><a class="markdownIt-Anchor" href="#cmake学习笔记"></a> Cmake学习笔记</h2><p>用于记录一下cmake开发中的一些整理性工作</p><h4 id="cmake变量"><a class="markdownIt-Anchor" href="#cmake变量"></a> cmake变量</h4><p>使用 <code>set(A B)</code> 来定义<code>A</code>这个新的变量，之后就可以通过<code>$&#123;A&#125;</code>来进行引用，可以想成一个<strong>自定义宏</strong></p><h4 id="动态静态链接-头文件配置"><a class="markdownIt-Anchor" href="#动态静态链接-头文件配置"></a> 动态/静态链接、头文件配置</h4><h5 id="头文件目录"><a class="markdownIt-Anchor" href="#头文件目录"></a> 头文件目录</h5><p><code>INCLUDE_DIRECTORIES</code></p><p>指定项目使用到的头文件目录，可以一次包含多个头文件目录</p><h5 id="添加库文件"><a class="markdownIt-Anchor" href="#添加库文件"></a> 添加库文件</h5><p>``</p><h4 id="添加外部文件夹"><a class="markdownIt-Anchor" href="#添加外部文件夹"></a> 添加外部文件夹</h4><p><code>add_subdirectory(source_dir,[binary_dir])</code></p><p>第一个参数就是外部文件夹的位置，而<code>binary_dir</code>表示输出的位置。如果代码目录在外部，则必须要指定第二个参数</p><p><code>ADD_SUBDIRECTORY</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TCP-IP-阅读笔记-2 加密算法</title>
      <link href="/2020/02/17/tcp-ip-yue-du-bi-ji-2-jia-mi/"/>
      <url>/2020/02/17/tcp-ip-yue-du-bi-ji-2-jia-mi/</url>
      
        <content type="html"><![CDATA[<h2 id="从https说起"><a class="markdownIt-Anchor" href="#从https说起"></a> 从HTTPs说起</h2><p>现实中和加密有关的网络攻击可以大致分为两种：<strong>被动攻击</strong>和 <strong>主动攻击</strong>。其中被动指的是攻击者窃听数据，信息传输双方很可能不知道攻击者的存在；而主动攻击更多的就是数据的伪造，直接导致信息传输中的数据改变。</p><p>我们常见的数据传输有如下</p><h3 id="对称加密"><a class="markdownIt-Anchor" href="#对称加密"></a> 对称加密</h3><p>指的就是加、解密使用的同是一串密钥，所以被称做对称加密。对称加密只有一个密钥作为私钥。<br />常见的对称加密算法：DES，AES等。</p><p>一方通过密钥将信息加密后，把密文传给另一方，另一方通过这个相同的密钥将密文解密，转换成可以理解的明文。他们之间的关系如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">明文 <span class="tag">&lt;<span class="name">-</span>&gt;</span> 密钥 <span class="tag">&lt;<span class="name">-</span>&gt;</span> 密文</span><br></pre></td></tr></table></figure><p>这样的一种信息传输方式虽然<strong>高效</strong>，但是非常容易被第三方获取到密钥。一旦密钥泄露，那么被动攻击和主动攻击就都有可能。</p><h3 id="非对称加密"><a class="markdownIt-Anchor" href="#非对称加密"></a> 非对称加密</h3><p>每个人生成一个“私钥-公钥”对</p><blockquote><p>使用私钥加密的信息，只能由该私钥对应的公钥才能解密，使用公钥加密的信息，只能由该公钥对应的私钥才能解密</p></blockquote><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后可以把你的<span class="keyword">public</span> <span class="built_in">key</span>分发给想给你传密文的用户，然后用户使用该<span class="keyword">public</span> <span class="built_in">key</span>加密过得密文，只有使用你的<span class="keyword">private</span> <span class="built_in">key</span>才能解密</span><br></pre></td></tr></table></figure><p>简而言之，每一方自己生成 <em>private-public</em> 对，私钥由自己所有，而公钥可以自由地进行分享。通过这种方式进行的数据传输，相比之前的对称加密明显要安全很多——第三方在不知道私钥的情况下，无法窃听到传输的明文内容</p><p>但这种方式无法避免<strong>主动攻击</strong>，也就是说，如果第三方在中间截获了某一方(<strong>A</strong>)的公钥，随后将自己的公钥进行替换 (美其名曰<strong>偷梁换柱</strong>)，让另一方(<strong>B</strong>)用 <strong>假的</strong> 公钥进行数据加密，那么这样第三方就可以轻松获取到<strong>B</strong>发送的信息；同时也可以往他们其中的某一方进行虚假数据的传输</p><h3 id="https协议出场"><a class="markdownIt-Anchor" href="#https协议出场"></a> HTTPs协议出场</h3><blockquote><p>在我个人的理解当中，https兼并了对称加密和非对称加密，通过 <strong>三对随机数</strong> 来进行协商，随后实现 <strong>每一次交互都可以生成不同的密钥条件下的对称加密传输</strong></p></blockquote><p>加粗的句话略有点绕口，我们慢慢说开来。</p><p>在HTTPs下，我们的研究对象从原来的两个，增加另一个第三方——<strong>证书(颁发者)</strong>。我们可以简单地想成另外一对公钥私钥。那么现在我们就有了三对公钥和私钥，接下来的工作就是依据某一个协议来利用好这三对。</p><h4 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h4><p>假定证书一方足够可靠 (也会出现证书造假的不安全情况发生，这里不提)，另外两方我们设定为<strong>服务端</strong>和<strong>客户端</strong>。</p><ul><li>对于服务端和客户端，都可以获取到证书的<strong>公钥</strong></li><li>服务端需要在协商之前 (连接建立之前)，将自己的公钥发给证书一方，如果服务端可以进行认证，那么服务端可以收到 <strong>由证书方的私钥加密过后的公钥</strong>，如下图：</li></ul><img src="https://showme.codes/assets/images/2017-2-20-292372-f3dd4b7370df950e.png" alt="第一版数字证书的内容"  /><h4 id="协商"><a class="markdownIt-Anchor" href="#协商"></a> 协商</h4><p>这样一来，我们的准备工作也就差不多了。那么之前那个密钥协商过程是如何进行的呢？</p><ul><li><p>首先进行常规的 TCP 三次握手工作</p></li><li><p>SSL一层建立在 TCP之上，HTTP之下。三次握手结束之后，<strong>客户端</strong> 发送一个 <code>client hello</code> 给服务端，其中包含了如下内容：</p><ul><li>可支持的加密算法和版本</li><li>客户端生成的第一个随机数 <strong>random1</strong></li></ul></li><li><p><strong>服务端</strong> 收到信息之后，需要验证是否兼容 <strong>加密算法和版本</strong> (不兼容就不能继续进行接下来的协商了)；若兼容，那么服务端生成第二个随机数 <strong>random2</strong> ，并且把我们之前服务端向证书机构加密过后的公钥也一起发送给 <strong>客户端</strong>。称这一步为 <code>serverhello</code></p></li><li><p><strong>客户端</strong> 需要先对服务端进行一下身份验证，在 CA 中验证合法性。验证通过之后，就可以使用证书颁发者的公钥，解密<strong>得到服务端的公钥</strong>。随后，客户端生成第三个随机数 <strong>random3</strong> ，使用服务端的公钥进行加密，再送回给服务端，我们称这个密文为 <code>PreMaster Key</code></p></li><li><p>服务端可以用自己的私钥，解密 <code>PreMaster Key</code> ， 得到第三个随机数。至此，三个随机数、此次HTTPs交互的加密算法，在两边都已经协商完成。只需要根据<code>加密算法 + 三个随机数</code>共同生成一个密钥，两方就可以得到一致的对称密钥</p></li><li><p>此后的传输，直接可以使用该对称密钥进行加密解密</p></li></ul><h4 id="更多的思考"><a class="markdownIt-Anchor" href="#更多的思考"></a> 更多的思考</h4><blockquote><p>为什么需要三个随机数？</p><p>保证每一次交互 (http连接) 之初生成的密钥具有随机性(加密算法可变，三个随机数可变)，那么居心叵测之人就无法得到密钥和加密算法内容</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探Anna</title>
      <link href="/2020/02/17/chu-tan-anna/"/>
      <url>/2020/02/17/chu-tan-anna/</url>
      
        <content type="html"><![CDATA[<h2 id="anna初探"><a class="markdownIt-Anchor" href="#anna初探"></a> Anna初探</h2><h3 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h3><p>实习中主要做的是数据库引擎的开发。这一次遇到的是伯克利开发的 <em>Anna</em> ，将透过两篇paper来大致讲述一下入门的内容。</p><h3 id="进入正题"><a class="markdownIt-Anchor" href="#进入正题"></a> 进入正题</h3><p>解决目标：</p><ul><li><em>data scaling</em> ：牵涉到数据分片 <strong>partition</strong></li><li><em>workload scaling</em> ：牵涉到 <strong>multi-master replication</strong></li><li>硬件最大化利用 &amp; 多核计算机性能 ：<strong>wait-free execution</strong> (每一个core尽可能让他们一直工作)</li><li>无协调的一致性 <strong>coordination-free consistency model</strong><ul><li>一致性哈希 &amp; 哈希环</li></ul></li></ul><blockquote><h5 id="lattice-晶格"><a class="markdownIt-Anchor" href="#lattice-晶格"></a> Lattice 晶格</h5><p>离散里面的一种偏序结构. 整个图里面只有一个起点和一个终点</p><p>达到的事务隔离级别 ：<strong>read-committed transaction</strong></p><p>就这一点，论文中提到了 <strong>casual consistency</strong> 和 <strong>read committed</strong> 两种一致性的<em>level</em> ，具体就留到后面展开论述</p></blockquote><h4 id="可用的分布式状态模型类别"><a class="markdownIt-Anchor" href="#可用的分布式状态模型类别"></a> 可用的分布式状态模型类别</h4><ul><li><p>共享内存</p><p>该方式常常需要额外的加锁去锁来进行一致性维护，因而极大地影响了系统运行效率</p><p>Lattice也不能解决异步请求的数据同步问题，它最重要的 <strong>merge function</strong> 也是需要</p></li><li><p>消息传递</p></li></ul><p>采用了消息传递的架构后，工作节点能够拥有类似于 <strong>local-thread</strong> 的私有状态(<em>state</em>)。由于对外界不可见，也就没有了并发的问题</p><p>但是由于各个副本之间牵涉到数据的同步，这就会有一个新的 <strong>状态一致性</strong> 问题的出现，我们需要采用新的机制来进行改进</p><p><strong>Single-Master</strong></p><ul><li>Key值只有一个副本，可以有比较好的一致性</li><li>问题：速度不能超过一个node ，这是一个瓶颈</li></ul><p><strong>Multi-Master</strong></p><ul><li>Key值存在于多个副本中</li><li>周期性进行广播发送<em>update</em> 信息</li><li>问题：一致性不能够保证</li></ul><blockquote><p><strong>Anna</strong> 使用的是无协调的 <em>multi-master replication</em> ，并且基于 <strong>lattice</strong> 来进行一致性的保证</p></blockquote><h3 id="anna架构"><a class="markdownIt-Anchor" href="#anna架构"></a> Anna架构</h3><p>主要根据两篇(2018 , 2019) 中先后两个版本的 <em>Anna</em> 架构不同点入手</p><blockquote><h4 id="lattice-based"><a class="markdownIt-Anchor" href="#lattice-based"></a> Lattice based</h4><p><em>Lattice</em> 是这个框架主打的内容：在给定的一个偏序条件下，只要该偏序关系重的 <strong>least upper bound</strong> 又满足了</p><ul><li>Commutativity 交换律</li><li>Associativity 结合律</li><li>Idempotence 幂等</li></ul><p>那么就可以说是满足一个晶格的关系。这样的系统我们也称作 <strong>ACI system</strong></p></blockquote><p>2018 Anna-ieee 中的架构图如下 （单一server）</p><img src="https://i.loli.net/2020/02/17/4xZGNqDcfgkKAlj.png" alt="image.png"  /><p>每一个 <em>actor</em>都会周期性发出广播，告知 <em>changeset</em> 所关联的 <em>master</em> ，将更新信息 <em>merge</em> 进入各自的私有状态空间，并且清空 <em>changeset</em></p><h4 id="多tire架构"><a class="markdownIt-Anchor" href="#多tire架构"></a> 多Tire架构</h4><p>这一个架构是在 2019 anna-vldb 中给出的，和之前的区别主要是适用于云端的分布式系统。更多地把架构重点放在了 <strong>水平扩展</strong> 、<strong>数据访问偏好&amp;负载均衡</strong>、<strong>数据垂直转移</strong></p><p>分布式Anna架构如下图：</p><blockquote><p>多个 <em>Tier</em> -&gt; 一个 <em>Tier</em> 内部有多个 <em>node</em> -&gt; 一个 <em>node</em> 内部有多个 <em>worker thread</em></p></blockquote><img src="https://i.loli.net/2020/02/17/RLbxf3vWFSJcnC4.png" alt="image.png"  /><h3 id="回到我们的一致性问题"><a class="markdownIt-Anchor" href="#回到我们的一致性问题"></a> 回到我们的一致性问题</h3><p><em>ACI</em> 系统中，由于它的组件也必然满足一个lattice关系，我们就可以采用 <strong>自底向上组合</strong> 的方式来进行系统逻辑的构建</p><img src="https://i.loli.net/2020/02/17/cYaxepWz2ZdgVTj.png" alt="image.png" style="zoom: 77%;" /><p>如上图所示 （<em>casual consistency</em>）</p><ul><li>每一个工作节点(worker)的状态都采用 <strong>MapLattice</strong> 来进行表示</li><li><strong>MapLattice</strong>的键，是一种不可变的类型(<em>immutable</em>) ；对于值，则是 <strong>ValueLattice</strong></li></ul><blockquote><p>对于 <strong>MapLattice</strong> 的 <em>merge</em> 算子，会对两个 MapLattice 的键进行 <em>Union</em> 操作，若键相同，那么会进行 <strong>ValueLattice</strong> 的 <em>merge</em> 算子</p></blockquote><hr /><p>接下来我们需要看之前提及的 <strong>casual consistency</strong> 和 <strong>read committed</strong></p><h4 id="casual-consistency"><a class="markdownIt-Anchor" href="#casual-consistency"></a> Casual Consistency</h4><blockquote><p>A , B 两个用户同时在进行事务处理，如果 B 能够见到 A 的更新，那么 B 的更新将会 <em>Overwrite</em> A用户的更新；如果不能够看到，那么就会触发数据记录的 <em>merge</em> 算子</p></blockquote><p>关键点：<strong>vector lock</strong></p><p>支持 <em>casual consistency</em> 的方案中，<em>vector lock</em> 的键由客户端的 <em>proxy ids</em> 组成，值则由相对应的版本号组成。他们相互具有关联关系。这里的 <em>version number</em> 可以由 <strong>MaxIntLattice</strong> 来进行实现，它每次都取<strong>更新前后的最大值</strong>，所以它的值必定是递增的，也契合了版本号递增的特点。</p><p>当进行一次写操作的时候，会把 <strong>vector lock</strong> 的版本号进行增加，连同数据项一起进行写入</p><p>图中的 <strong>pair lattice</strong> 也具有 <em>merge</em> 算子，具体算法如下</p><blockquote><p>对于两个 <strong>pair lattice</strong> P(a,b) 和 Q(a,b) ，如果 P.a &gt; Q.a (表示偏序大小关系) ，我们称 <strong>P casually follows Q</strong> ，并且将 <em>merge</em> 结果设置为 P</p><p>如果不能够进行比较，那么<em>merge</em> 结果就是</p><p><img src="https://i.loli.net/2020/02/17/cbe2SQOmtJ9KPrx.png" alt="image.png" /></p></blockquote><h4 id="read-committed"><a class="markdownIt-Anchor" href="#read-committed"></a> Read Committed</h4><p>和数据库事务隔离级别一样，读提交的要求就是避免 <strong>脏读</strong> 和 <strong>脏写</strong></p><h5 id="脏写"><a class="markdownIt-Anchor" href="#脏写"></a> 脏写</h5><p>多个写事件的执行中，我们只需要添加一个 <em>larger timestamp wins</em> 策略</p><h5 id="脏读"><a class="markdownIt-Anchor" href="#脏读"></a> 脏读</h5><p>添加事务写入的缓冲区，保证未提交的事务不会被放入 <em>KVS</em></p><h3 id="遗留的一些问题"><a class="markdownIt-Anchor" href="#遗留的一些问题"></a> 遗留的一些问题</h3><ul><li>Critical path of every request 是什么？</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题</title>
      <link href="/2020/01/15/bei-bao-wen-ti/"/>
      <url>/2020/01/15/bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="1-01背包问题"><a class="markdownIt-Anchor" href="#1-01背包问题"></a> 1. 01背包问题</h3><p>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 件物品和一个容量是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span> 的背包。每件物品只能使用一次。</p><p>分析：</p><ul><li>每一个背包只有 <strong>拿出 or 不拿出</strong> 两种情况</li><li>对于 <strong>dp</strong> 数组，我们某一个状态 <code>dp[i][j]</code> 表示 <strong>前i种背包的情况下，他们的总重量是 j 的最优解</strong><ul><li>如果 <strong>i</strong> 背包不拿，那么 <code>dp[i][j] = dp[i - 1][j]</code></li><li>如果 <strong>i</strong> 背包拿取，那么 <code>dp[i][j] = dp[i - 1][j - weights[i]] + values[i]</code><ul><li>也就是说，拿取之后，需要看剩下的部分最优解</li></ul></li></ul></li></ul><h4 id="算法优化"><a class="markdownIt-Anchor" href="#算法优化"></a> 算法优化</h4><p>根据之前的状态转移方程，我们可以约减一维的 <strong>dp</strong> 空间</p><p>改进之后的 <strong>dp</strong> 状态转移方程如下：</p><p><code>dp[i] = max(dp[j], dp[j - weights[i]] + values[i])</code></p><blockquote><p>为什么在内层循环，<strong>j</strong> 需要逆序？</p><p>在没有开始计算的时候，<strong>dp[i]表示的是dp[i-1][j]</strong> 。而当我们需要计算 <code>dp[i] = max(dp[j], dp[j - weights[i]] + values[i])</code>的时候，需要保证 <code>dp[j - w[i]]</code> 是 <strong>没有被改变的</strong>。因此需要<strong>从后往前</strong></p></blockquote><h3 id="2-完全背包问题"><a class="markdownIt-Anchor" href="#2-完全背包问题"></a> 2. 完全背包问题</h3><p>每一件物品可以 <strong>无限次</strong> 拿取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N , V;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    vector&lt;int&gt; w(N + 1) , v(N + 1);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= N ; ++i) <span class="built_in">cin</span> &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span> , <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(V + <span class="number">1</span> , <span class="number">0</span>))</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N ; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt;= V; ++j)&#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ; k*w[i] &lt;= j; ++k)&#123;</span><br><span class="line">                dp[i][j] = max(dp[i][j] , dp[i][j - k * w[i]] + k * v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[N][V] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最重要的状态转移方程对比</p><ul><li><strong>01背包</strong> ：<code>dp[i][j] = max(dp[i-1][j],dp[i - 1][j - w[i]] + v[i])</code></li><li><strong>完全背包</strong> ：<code>dp[i][j] = max(dp[i][j] , dp[i - 1][j - k * w[i]] + k * v[i]);</code></li></ul><p>不难看出，两者其实非常的类似。根据下标我们可以给出压缩之后的优化版本完全背包解法</p><blockquote><p><strong>01背包</strong> 和 <strong>完全背包</strong> 的不同</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01背包</span></span><br><span class="line"><span class="keyword">for</span> i  in <span class="number">0</span> ... N</span><br><span class="line">    <span class="keyword">for</span>  j = V ... <span class="number">0</span></span><br><span class="line">        f[j] = max&#123;f[j], f[j - weight[i]] + value[i]&#125;</span><br><span class="line"><span class="comment">//完全背包</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">int</span> <span class="number">0</span> ... N</span><br><span class="line">  <span class="keyword">for</span> j = <span class="number">0</span> ... V</span><br><span class="line">      f[j] = max&#123;f[j] , f[j - weight[j]] + value[i]&#125;</span><br></pre></td></tr></table></figure><p>可以看出，只有内层循环的执行顺序不同</p></blockquote><p>给出 <strong>完全背包问题</strong> 的优化方案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , capacity;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; capacity;</span><br><span class="line">    vector&lt;int&gt; c(n + 1) , w(n + 1);</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(max(n , capacity))</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ;++i) <span class="built_in">cin</span> &gt;&gt; c[i] &gt;&gt; w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = c[i] ; j &lt;= capacity ; ++j)</span><br><span class="line">            dp[j] = max(dp[j] , dp[j - c[i]] + w[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[capacity];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++新特性</title>
      <link href="/2020/01/15/c-xin-te-xing/"/>
      <url>/2020/01/15/c-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="whats-new-in-c-11"><a class="markdownIt-Anchor" href="#whats-new-in-c-11"></a> What’s new in C++ 11?</h2><h3 id="storage-duration-specifier"><a class="markdownIt-Anchor" href="#storage-duration-specifier"></a> storage duration specifier</h3><p>多个C++版本都对变量存储时间的定义有严格的说明</p><ul><li><p><code>auto</code> - <em>automatic</em> storage duration.</p></li><li><p><code>register</code> - <em>automatic</em> storage duration. Also hints to the compiler to place the object in the processor’s register. (deprecated) ——<em>since C++ 17</em></p></li><li><p><code>static</code> - <em>static</em> or <em>thread</em> storage duration and <em>internal</em> linkage</p></li><li><p><code>extern</code> - <em>static</em> or <em>thread</em> storage duration and <em>external</em> linkage.</p></li><li><p><code>thread_local</code> - <em>thread</em> storage duration</p><p>The <code>thread_local</code> keyword is only allowed for objects declared at namespace scope, objects declared at block scope, and static data members. It indicates that the object has <strong>thread storage duration</strong>. It can be combined with <code>static</code> or <code>extern</code> to specify internal or external linkage (except for static data members which always have external linkage), respectively, but that additional <code>static</code> doesn’t affect the storage duration.</p></li><li><p><code>mutable</code> - does not affect storage duration or linkage</p><p>注意：<code>mutable</code> 主要是标识 <strong>const对象</strong> 中某些可变的成员，实现了从二进制的物理 <strong>const</strong> 到逻辑 <strong>const</strong> (外观不变)</p></li></ul><h3 id="variadic-templates"><a class="markdownIt-Anchor" href="#variadic-templates"></a> Variadic templates</h3><p>可变类模板，在 <code>c++ reference</code> 里面以 <em>parameter pack</em> 来代替</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;class... Types&gt;<span class="comment">//class ... Types 是一个 pack 的声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(Types... args)</span> </span>&#123;&#125;<span class="comment">//Types... args 是</span></span><br></pre></td></tr></table></figure><h4 id="pack-expansion"><a class="markdownIt-Anchor" href="#pack-expansion"></a> Pack Expansion</h4><ul><li><code>&amp;args...</code> 代表的是参数扩展</li><li><code>&amp;args</code>代表的是 <em>pack pattern</em> 本身</li></ul><h3 id="move-semantics"><a class="markdownIt-Anchor" href="#move-semantics"></a> Move semantics</h3><blockquote><p><strong>凡是取地址（<code>&amp;</code>）操作可以成功的都是左值，其余都是右值</strong></p><ul><li>等号左边的不一定是左值——可以通过操作符重载来让左部变成 <strong>右值</strong></li></ul></blockquote><h4 id="右值引用"><a class="markdownIt-Anchor" href="#右值引用"></a> 右值引用</h4><p>我们之前常见的都是 <strong>左值引用</strong>，指的是我们只能够将 <strong>左值</strong> 赋给一个引用。</p><ul><li><code>int&amp; a = 1</code> 就是非法的。而我们也可以 <code>int const&amp; i = 42;</code> 来进行一个 <em>tricky</em> 的躲避</li></ul><p>在 <code>c++11</code>中允许了右值引用的出现</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>&amp;&amp; a = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h4 id="移动语义"><a class="markdownIt-Anchor" href="#移动语义"></a> 移动语义</h4><p>我们在进行 <code>Test(const Test&amp; test)</code> 拷贝构造函数的执行过程中，会造成很多的拷贝浪费。当单独的一次拷贝构造函数 (特别是对指针数组这些资源)过程消耗特别大的时候，对于性能来说是很低的。</p><p>那么 <code>c++11</code>标准给出了 <strong>移动拷贝构造函数</strong> 和 <strong>移动赋值操作符重载</strong>。此外，还支持 <code>std::move()</code>来强制性让 <strong>左值转化为右值</strong></p><h4 id="完美转发"><a class="markdownIt-Anchor" href="#完美转发"></a> 完美转发</h4><p>我们想要实现</p><blockquote><p>多级函数调用过程中</p><ul><li>如果变量是左值，那么它作为其他函数的参数的时候也应该是 <strong>左值</strong></li><li>如果变量是右值，那么它作为其他函数的参数的时候也应该是 <strong>右值</strong></li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;in func&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">relay</span><span class="params">(T&amp;&amp; t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;in relay&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    func(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    relay(Test());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个例子就是一个 <strong>反例</strong>。我们在传入 <code>func(t)</code> 的时候，其实调用了 <strong>拷贝构造函数</strong> (因为编译器把 <strong>t</strong> 当做了一个 <strong>左值</strong>)</p><blockquote><p><code>std::forward&lt;T&gt;()</code> ，能够保留参数的左右值类型</p></blockquote><h3 id="value-category"><a class="markdownIt-Anchor" href="#value-category"></a> Value Category</h3><p>不止左值右值那么简单</p><blockquote><p>Cpp reference:</p><p>Each C++ <a href="https://en.cppreference.com/w/cpp/language/expressions">expression</a> (an operator with its operands, a literal, a variable name, etc.) is characterized by two independent properties: a <em>type</em> and a <em>value category</em>. Each expression has some non-reference type, and each expression belongs to exactly one of the three primary value categories: <em>prvalue</em>, <em>xvalue</em>, and <em>lvalue</em>.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂谈-沉思帖</title>
      <link href="/2019/12/22/za-tan-ji-xie-tie/"/>
      <url>/2019/12/22/za-tan-ji-xie-tie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>多尝试新的方向，不浮躁地随波逐流；</p><p>有一个自己喜爱的方向是如此地难能可贵</p></blockquote><h2 id="杂谈-沉思帖"><a class="markdownIt-Anchor" href="#杂谈-沉思帖"></a> 杂谈-沉思帖</h2><p>2019 秋季这个课表算是无法无天了，虽然在春季就做了一些心理预设，但是当它到来的时候，特别是到了现在考试周将近，还是压得人喘不过气。</p><p>前一段时间一直在各处投递简历。在打消了出国打算、ML的打算之后，我从暑期就开始对自己的方向进行了思考，留给我试错的时间已经不多了，在后续的一年半时间中，我是需要针对一桩事业真正投入地进行付出，并且能够有一定的产出的。在我各处找着实习的时候，字节一面后十分钟的拒信给了我巨大的打击——</p><blockquote><p>基础不牢，地动山摇</p></blockquote><p>面试官丢给我的几乎每一个计网问题我都招架不来，可以说上个学期学的内容全数奉还给了老师。内心千万个声音在警戒着我：你的基础根本不牢固，做了种种项目又有什么用？</p><p>图森的面试官告诉我，如果这些基本的网络知识不过关，如何能够在出错的时候进行精准的错误排查？特别是在客户流量比较大的情况下，网络阻塞、丢包这些错误屡见不鲜，如何可以最大限度地减少经济损失？</p><blockquote><p>网络协议中每一层的网络攻击可以有哪些？</p></blockquote><p>这个问题我可能一辈子也不忘了，图森的二面官这么一个问题丢过来，我当时的反应就是：一个也没有。</p><p>后续的结果也显而易见，又是一封拒信。虽然 <code>coding</code> 过关，但是基础过于不扎实而不会要我。</p><p>所以，基础 基础 基础！！！</p><p>什么叫做基础呢？</p><p>其实这些问题，老师课上也没有系统性的说过。我丢失了大一的时候看书的习惯，大二只是对课堂内的东西进行机械接受。最讽刺的就是，当字节面试官问“你觉得计网是一门怎么样的课”的时候，我第一反应回答就是“一门背书的课”。我现在回顾过来，真想好好打当时的自己一个巴掌。不过事实的确如此，我在大二下就是背书来学计网的，当时的我根本没有心思听老师讲课，只想着多做一些项目美滋滋。</p><p>现在就到了要亡羊补牢的时候了，11月上旬的样子吧，我开始恶补我之前的 <code>JVM</code>, 计网，多线程，<code>linux</code> 内核相关的知识。加上后续几个面试的逼迫，我可以说拼了老命在学 (这么紧的课程还要面试，真的会折磨我自己)</p><p><code>12.21</code> ，<em>TX</em> 的面试官突然打来电话，约了一面。可以说这次是我把握比较好的一次面试了。说着，人的确就是一个犯贱的种，需要一些外力压迫来威胁自己去学习。还有一个很重要的点就是，我真的过于浮躁了，急于求成想去学 <em>ML</em> 但是发现真实资源如此贫乏(一整个院搞什么ML? 我们又不是人工智能学院！) 没有一个前辈带领的路走得真心艰苦，没有方向，没有可以去追随的人，于是放弃。现在是时候好好静下心去听听自己了。</p><blockquote><p>冬至已至。</p><p>希望新的一年，能够笃定，坚毅。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UpUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP 阅读笔记(1)</title>
      <link href="/2019/12/14/tcp-ip-yue-du-bi-ji-1/"/>
      <url>/2019/12/14/tcp-ip-yue-du-bi-ji-1/</url>
      
        <content type="html"><![CDATA[<h3 id="tcp连接形式"><a class="markdownIt-Anchor" href="#tcp连接形式"></a> TCP连接形式</h3><p>TCP连接使用了一对套接字 (<code>socket</code>) 来进行唯一表示，也就是把 <code>IP</code> 头部的源和目的IP地址，携同TCP头部的源端口号和目的端口号，来进行一个标识。</p><h3 id="seq-与-ack"><a class="markdownIt-Anchor" href="#seq-与-ack"></a> Seq 与 Ack</h3><p>序列号与响应号是通信双方进行确认判定的依据。每一次报文中的响应号就是上一次报文的序列号  + 1 ，表示了接收方想要接收的下一个序列号。</p><p>我们所熟知的三次握手，其实本质上就是发送方和接收方的序列号交换：</p><blockquote><p>第一次报文发送：SYN表明是客户端期望进行序列号同步，并且发送自己的序列号</p><p>第二次报文发送：SYN表示是服务端期望进行序列号同步，返回之前客户端的序列号 + 1 , 表示此时客户端序列号已经同步。此时还需要发送服务端自己的序列号，等待客户端是否给予最后一次响应。</p><p>第三次报文发送：ACK确实就是服务端序列号 + 1 的话，那么表明服务端的序列号也已经同步。至此通过三次报文交换来实现全双工通信的两端序列号同步。</p></blockquote><p>对于四次挥手，其实也是序列号的交换问题。</p><p>书上的问题给出了进一步的思考：如果出现同时建立连接和同时断开连接，报文发送个数是多少？</p><ul><li>对于同时建立连接的情况，一开始同时就会有两次报文发送，这时候两个报文都是 SYN，期望同步自己的序列号。此时连接两端的两个 <code>socket</code> 其实都只需要得到自己想要的 <code>ACK</code> 就可以了。这时候就是四次报文交换</li><li>对于同时断开连接的情况，和上面完全一样，也是四次</li></ul><h3 id="time_wait问题"><a class="markdownIt-Anchor" href="#time_wait问题"></a> TIME_WAIT问题</h3><p>四次挥手结束之后，连接断开的发起者还会继续等待 <code>2MSL</code> 的时间长度，这种做法能够避免最后一次 <strong>ACK</strong> 因为网络问题没有发送到，给 <strong>被动断开方</strong> 时间进行超时重传。</p><p>在发起者还在等待的时候，其实两端的端口还是在连接的状态。问题就来了——端口占用问题。</p><p>也就是说，如果我们这时候在服务端或者客户端，断开 <code>socket</code> 却又立即重启，这时候就会出现端口占用的情况，导致我们的连接被拒绝。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单例</title>
      <link href="/2019/12/07/she-ji-mo-shi-dan-li/"/>
      <url>/2019/12/07/she-ji-mo-shi-dan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式"><a class="markdownIt-Anchor" href="#单例模式"></a> 单例模式</h2><p>给出最原始的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个静态的实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="comment">//私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//给出一个公共的静态方法返回一个单一实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们就需要考虑<mark>多线程环境</mark>下的单例模式实现了</p><p><strong>懒汉模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。</span></span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>饿汉模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多线程下的懒汉模式会出现问题——在判定是 <em>null</em> 的时候，还没来得及进行创建实例，另一个进程就进入进行判定</p></blockquote><h4 id="解决办法1"><a class="markdownIt-Anchor" href="#解决办法1"></a> 解决办法1</h4><p>方法上添加 <strong>synchronized</strong> 关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。</span></span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>问题：如果两个线程都要获取单例引用，只能等一个线程获取后，另一个线程才能获取。</p></blockquote><h4 id="解决方法2"><a class="markdownIt-Anchor" href="#解决方法2"></a> 解决方法2</h4><p>双检查锁机制（Double Check Locking）,也叫”DCL“</p><blockquote><p>双锁的意思，是指 检测两次instance是否为空。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//使用volatile关键字保其可见性  </span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MySingleton</span><span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;<span class="comment">//懒汉式   </span></span><br><span class="line">                  <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">                    <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;<span class="comment">//二次检查  </span></span><br><span class="line">                        instance = <span class="keyword">new</span> MySingleton();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h4 id="解决办法3"><a class="markdownIt-Anchor" href="#解决办法3"></a> 解决办法3</h4><p>当然，我们最好还是采取<strong>饿汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//类加载时就初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解决办法4"><a class="markdownIt-Anchor" href="#解决办法4"></a> 解决办法4</h4><p>采取 <strong>静态内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE; </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解决办法5"><a class="markdownIt-Anchor" href="#解决办法5"></a> 解决办法5</h4><p>枚举 Enum</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EasySingleton</span></span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库-索引</title>
      <link href="/2019/12/05/shu-ju-ku-zheng-li-suo-yin/"/>
      <url>/2019/12/05/shu-ju-ku-zheng-li-suo-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="索引"><a class="markdownIt-Anchor" href="#索引"></a> 索引</h2><h4 id="页存储"><a class="markdownIt-Anchor" href="#页存储"></a> 页存储</h4><img src="https://i.loli.net/2019/12/05/dQE6NVkHZJcWfye.png" style="zoom:50%;" /><p>如上就是数据库在Disk Storage的一个存储方式。一个页包含若干 <em>Data Rows</em> , 通过 <em>Row directory</em> 来进行索引</p><blockquote><p>A row in a table can be uniquely specified with the page number § and slot number (S).</p></blockquote><h5 id="位图索引"><a class="markdownIt-Anchor" href="#位图索引"></a> 位图索引</h5><p><a href="https://www.cnblogs.com/LBSer/p/3322630.html">https://www.cnblogs.com/LBSer/p/3322630.html</a></p><p>位图索引中只维护distinct值，也就是说重复的值是不维护在树中</p><p>对于每一个列建立一个</p><ul><li><p>位图索引适合只有几个固定值的列，如性别、婚姻状况、行政区等等，而身份证号这种类型不适合用位图索引。</p></li><li><p>此外，位图索引适合静态数据，而不适合索引频繁更新的列</p></li></ul><h5 id="散列索引"><a class="markdownIt-Anchor" href="#散列索引"></a> 散列索引</h5><p>散列文件组织就是根据一个键通过散列计算把对应的记录都放到同一个槽中，这样的话相同的键值对应的记录就一定是放在同一个文件里了，也就减少了文件读取的次数，提高了效率。</p><p>散列索引根据对应键的散列码来找到最终的索引项的技术，其实和B树就差不多，也就是一种索引之上的二级辅助索引，我理解散列索引都是二级或更高级的稀疏索引，否则桶就太多了，效率也不会很高</p><h5 id="聚簇索引"><a class="markdownIt-Anchor" href="#聚簇索引"></a> 聚簇索引</h5><p>所谓聚簇索引，就是指<strong>主索引文件</strong>和<strong>数据文件</strong>为<mark>同一份文件</mark>，聚簇索引主要用在<strong>Innodb</strong>存储引擎中。在该索引实现方式中B+Tree的叶子节点上的data就是数据本身，key为主键，如果是一般索引的话，data便会指向对应的主索引，如下图所示：</p><p>在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。</p><h5 id="非聚簇索引"><a class="markdownIt-Anchor" href="#非聚簇索引"></a> 非聚簇索引</h5><p>聚簇索引的叶节点就是数据节点，而非聚簇索引的叶节点仍然是索引节点，并保留一个链接<strong>指向对应数据块</strong>。</p><h5 id="辅助索引"><a class="markdownIt-Anchor" href="#辅助索引"></a> 辅助索引</h5><p>在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要<strong>二次查找</strong>。辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据叶，再通过数据叶中的Page Directory找到数据行</p><h5 id="唯一索引"><a class="markdownIt-Anchor" href="#唯一索引"></a> 唯一索引</h5><p>表明此索引的<mark>每一个索引值只对应唯一的数据记录</mark>，对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复</p><h5 id="主键索引"><a class="markdownIt-Anchor" href="#主键索引"></a> 主键索引</h5><p>在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问</p><hr /><p>数据库引擎 ：myISAM , innodb</p><p>myisam索引：因为myisam的索引和数据是分开存储存储的，myisam通过<strong>key_buffer</strong>把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因</p><p>innodb索引：innodb的数据和索引放在一起，当找到索引也就找到了数据</p><img src="https://img-blog.csdn.net/20161102111454921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img" style="zoom:75%;" /><p>1.对于<strong>非聚簇索引表</strong>来说（右图），表数据和索引是分成两部分存储的，主键索引和二级索引存储上没有任何区别。使用的是B+树作为索引的存储结构，所有的节点都是索引，叶子节点存储的是索引+索引对应的记录的数据。</p><p>2.对于<strong>聚簇索引表</strong>来说（左图），表数据是和主键一起存储的，主键索引的叶结点存储行数据(包含了主键值)，二级索引的叶结点存储行的主键值。使用的是B+树作为索引的存储结构，非叶子节点都是索引关键字，但非叶子节点中的关键字中不存储对应记录的具体内容或内容地址。叶子节点上的数据是主键与具体记录(数据内容)</p><blockquote><h5 id="聚簇索引的优点"><a class="markdownIt-Anchor" href="#聚簇索引的优点"></a> 聚簇索引的优点</h5><p>1.当你需要取出<mark>一定范围内</mark>的数据时，用聚簇索引也比用非聚簇索引好。</p><p>2.当通过聚簇索引查找目标数据时理论上比非聚簇索引要快，因为非聚簇索引定位到对应主键时还要多一次目标记录寻址,即多一次I/O。</p><p>3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值。</p><h5 id="聚簇索引的缺点"><a class="markdownIt-Anchor" href="#聚簇索引的缺点"></a> 聚簇索引的缺点</h5><p>1.<strong>插入速度严重依赖于插入顺序</strong>，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。</p><p>2.<strong>更新主键的代价很高，因为将会导致被更新的行移动</strong>。因此，对于InnoDB表，我们一般定义主键为不可更新。</p><p>3.<strong>二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。</strong></p><p>二级索引的叶节点存储的是主键值，而不是行指针（非聚簇索引存储的是指针或者说是地址），这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。</p><p>4.<strong>采用聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多</strong>，因为插入要保证主键不能重复，判断主键不能重复，采用的方式在不同的索引下面会有很大的性能差距，聚簇索引遍历所有的叶子节点，非聚簇索引也判断所有的叶子节点，但是聚簇索引的叶子节点除了带有主键还有记录值，记录的大小往往比主键要大的多。这样就会导致聚簇索引在判定新记录携带的主键是否重复时进行昂贵的I/O代价。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC周赛 2019-10-05</title>
      <link href="/2019/10/08/leetcode-zhou-sai-20191005/"/>
      <url>/2019/10/08/leetcode-zhou-sai-20191005/</url>
      
        <content type="html"><![CDATA[<h2 id="1-play-with-chips"><a class="markdownIt-Anchor" href="#1-play-with-chips"></a> 1. Play with Chips</h2><h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3><p>There are some chips, and the i-th chip is at position <code>chips[i]</code>.</p><p>You can perform any of the two following types of moves <strong>any number of times</strong> (possibly zero) <strong>on any chip</strong>:</p><ul><li>Move the <code>i</code>-th chip by 2 units to the left or to the right with a cost of <strong>0</strong>.</li><li>Move the <code>i</code>-th chip by 1 unit to the left or to the right with a cost of <strong>1</strong>.</li></ul><p>There can be two or more chips at the same position initially.</p><p>Return the minimum cost needed to move all the chips to the same position (any position).</p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>如果两个chip的位置相差为偶数, 则 <code>cost = 0</code>. 否则 <code>coust = 1</code></p><p>我们预先获取chip的一个哈希来进行缓存, 之后遍历哈希中的每一个数, 作为 <strong>目的地</strong>.</p><p>那么我们的问题就变成 ： 找出那一个 <strong>目的地</strong> , 使得 <code>cost</code> 最小即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostToMoveChips</span><span class="params">(<span class="keyword">int</span>[] chips)</span> </span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : chips) &#123;</span><br><span class="line">        set.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : set) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> chip : chips) &#123;</span><br><span class="line">            <span class="keyword">int</span> dis = Math.abs(num - chip);</span><br><span class="line">            sum += dis % <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; min) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        min = Math.min(sum, min);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-longest-arithmetic-subsequence-of-given-difference"><a class="markdownIt-Anchor" href="#2-longest-arithmetic-subsequence-of-given-difference"></a> 2. Longest Arithmetic Subsequence of Given Difference</h2><h3 id="描述-2"><a class="markdownIt-Anchor" href="#描述-2"></a> 描述</h3><p>Given an integer array <code>arr</code> and an integer <code>difference</code>, return the length of the longest subsequence in <code>arr</code> which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals <code>difference</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="string">arr</span> <span class="string">=</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]<span class="string">,</span> <span class="string">difference</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Output:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">Explanation:</span> <span class="string">The</span> <span class="string">longest</span> <span class="string">arithmetic</span> <span class="string">subsequence</span> <span class="string">is</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]<span class="string">.</span></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="string">arr</span> <span class="string">=</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]<span class="string">,</span> <span class="string">difference</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Output:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Explanation:</span> <span class="string">The</span> <span class="string">longest</span> <span class="string">arithmetic</span> <span class="string">subsequence</span> <span class="string">is</span> <span class="string">any</span> <span class="string">single</span> <span class="string">element.</span></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="string">arr</span> <span class="string">=</span> [<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]<span class="string">,</span> <span class="string">difference</span> <span class="string">=</span> <span class="number">-2</span></span><br><span class="line"><span class="attr">Output:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">Explanation:</span> <span class="string">The</span> <span class="string">longest</span> <span class="string">arithmetic</span> <span class="string">subsequence</span> <span class="string">is</span> [<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>]<span class="string">.</span></span><br></pre></td></tr></table></figure><h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3><p>一开始很明显想到用 <code>DP</code> 来解决. 每一步前进的同时需要缓存下当前位置, 便于后续的查找</p><p>我们缓存如下的内容：</p><ul><li>每一个数字和它所处可能位置 <code>Set</code> 的哈希映射</li><li>DP 数组，用于当前 <code>dp[i]</code> 的确定</li></ul><p>一开始就这样做了，但是 error 了一次. 原因就是这里的 dp 数组并不是单调上升，因为可能会出现中间断层的情况，例如 <code>[1,2,3,1,2,3,4]</code> , 中间的 <code>1</code> 位置就是断层的出现点. (之后一想，其实也可以通过自己的维护来进行避免，问题不大)</p><p>最终代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestSubsequence</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> difference)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> n = arr.length;</span><br><span class="line">       <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">       Map&lt;Integer, Set&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">       Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">       set.add(<span class="number">0</span>);</span><br><span class="line">       map.put(arr[<span class="number">0</span>], set);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">           <span class="keyword">if</span> (!map.containsKey(arr[i])) &#123;</span><br><span class="line">               set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">               set.add(i);</span><br><span class="line">               map.put(arr[i], set);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               set = map.get(arr[i]);</span><br><span class="line">               set.add(i);</span><br><span class="line">               map.put(arr[i], set);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">int</span> target = arr[i] - difference;</span><br><span class="line">           <span class="keyword">if</span> (!map.containsKey(target)) &#123; <span class="comment">//不包含前一个数</span></span><br><span class="line">               dp[i] = <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               set = map.get(target);</span><br><span class="line">               <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> num : set) &#123;</span><br><span class="line">                   maxLen = Math.max(maxLen, dp[num]);</span><br><span class="line">               &#125;</span><br><span class="line">               dp[i] = maxLen + <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> num : dp) &#123;</span><br><span class="line">           ans = Math.max(num, ans);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="3-path-with-maximum-gold"><a class="markdownIt-Anchor" href="#3-path-with-maximum-gold"></a> 3. Path with Maximum Gold</h2><h3 id="描述-3"><a class="markdownIt-Anchor" href="#描述-3"></a> 描述</h3><p>In a gold mine <code>grid</code> of size <code>m * n</code>, each cell in this mine has an integer representing the amount of gold in that cell, <code>0</code> if it is empty.</p><p>Return the maximum amount of gold you can collect under the conditions:</p><ul><li>Every time you are located in a cell you will collect all the gold in that cell.</li><li>From your position you can walk one step to the left, right, up or down.</li><li>You can’t visit the same cell more than once.</li><li>Never visit a cell with <code>0</code> gold.</li><li>You can start and stop collecting gold from <strong>any</strong> position in the grid that has some gold.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="string">grid</span> <span class="string">=</span> [[<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>],[<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>],[<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>]]</span><br><span class="line"><span class="attr">Output:</span> <span class="number">24</span></span><br><span class="line"><span class="attr">Explanation:</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>],</span><br><span class="line"> [<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>]]</span><br><span class="line"><span class="string">Path</span> <span class="string">to</span> <span class="string">get</span> <span class="string">the</span> <span class="string">maximum</span> <span class="string">gold,</span> <span class="number">9</span> <span class="string">-&gt;</span> <span class="number">8</span> <span class="string">-&gt;</span> <span class="number">7</span><span class="string">.</span></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="string">grid</span> <span class="string">=</span> [[<span class="number">1</span>,<span class="number">0</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>],[<span class="number">9</span>,<span class="number">0</span>,<span class="number">20</span>]]</span><br><span class="line"><span class="attr">Output:</span> <span class="number">28</span></span><br><span class="line"><span class="attr">Explanation:</span></span><br><span class="line">[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">7</span>],</span><br><span class="line"> [<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>],</span><br><span class="line"> [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line"> [<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">9</span>,<span class="number">0</span>,<span class="number">20</span>]]</span><br><span class="line"><span class="string">Path</span> <span class="string">to</span> <span class="string">get</span> <span class="string">the</span> <span class="string">maximum</span> <span class="string">gold,</span> <span class="number">1</span> <span class="string">-&gt;</span> <span class="number">2</span> <span class="string">-&gt;</span> <span class="number">3</span> <span class="string">-&gt;</span> <span class="number">4</span> <span class="string">-&gt;</span> <span class="number">5</span> <span class="string">-&gt;</span> <span class="number">6</span> <span class="string">-&gt;</span> <span class="number">7</span><span class="string">.</span></span><br></pre></td></tr></table></figure><h3 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h3><p>很简单的 DFS 算法实现, 没什么好说的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaximumGold</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    max = Math.max(max, dfs(grid, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;, <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span>[] startPos, <span class="keyword">int</span> gold)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> r = startPos[<span class="number">0</span>], c = startPos[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span> || c &lt; <span class="number">0</span> || r &gt;= m || c &gt;= n || grid[r][c] == <span class="number">0</span>) <span class="keyword">return</span> gold;</span><br><span class="line">        gold += grid[r][c];</span><br><span class="line">        <span class="keyword">int</span>[][] nums = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                nums[i][j] = grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[r][c] = <span class="number">0</span>;             <span class="comment">//Get the gold</span></span><br><span class="line">        <span class="keyword">int</span> a1 = dfs(nums, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;r, c + <span class="number">1</span>&#125;, gold);</span><br><span class="line">        <span class="keyword">int</span> b1 = dfs(nums, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;r, c - <span class="number">1</span>&#125;, gold);</span><br><span class="line">        <span class="keyword">int</span> c1 = dfs(nums, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;r + <span class="number">1</span>, c&#125;, gold);</span><br><span class="line">        <span class="keyword">int</span> d1 = dfs(nums, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;r - <span class="number">1</span>, c&#125;, gold);</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;a1, b1, c1, d1&#125;).max().getAsInt();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-count-vowels-permutation"><a class="markdownIt-Anchor" href="#4-count-vowels-permutation"></a> 4. Count Vowels Permutation</h2><h3 id="描述-4"><a class="markdownIt-Anchor" href="#描述-4"></a> 描述</h3><p>Given an integer <code>n</code>, your task is to count how many strings of length <code>n</code> can be formed under the following rules:</p><ul><li>Each character is a lower case vowel (<code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, <code>'u'</code>)</li><li>Each vowel <code>'a'</code> may only be followed by an <code>'e'</code>.</li><li>Each vowel <code>'e'</code> may only be followed by an <code>'a'</code> or an <code>'i'</code>.</li><li>Each vowel <code>'i'</code> <strong>may not</strong> be followed by another <code>'i'</code>.</li><li>Each vowel <code>'o'</code> may only be followed by an <code>'i'</code> or a <code>'u'</code>.</li><li>Each vowel <code>'u'</code> may only be followed by an <code>'a'.</code></li></ul><p>Since the answer may be too large, return it modulo <code>10^9 + 7.</code></p><p><strong>Example 1:</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> n = <span class="number">1</span></span><br><span class="line"><span class="attr">Output:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">Explanation:</span> All possible strings <span class="attr">are:</span> <span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;i&quot;</span> , <span class="string">&quot;o&quot;</span> and <span class="string">&quot;u&quot;</span>.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> n = <span class="number">2</span></span><br><span class="line"><span class="attr">Output:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">Explanation:</span> All possible strings <span class="attr">are:</span> <span class="string">&quot;ae&quot;</span>, <span class="string">&quot;ea&quot;</span>, <span class="string">&quot;ei&quot;</span>, <span class="string">&quot;ia&quot;</span>, <span class="string">&quot;ie&quot;</span>, <span class="string">&quot;io&quot;</span>, <span class="string">&quot;iu&quot;</span>, <span class="string">&quot;oi&quot;</span>, <span class="string">&quot;ou&quot;</span> and <span class="string">&quot;ua&quot;</span>.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="string">n</span> <span class="string">=</span> <span class="number">5</span></span><br><span class="line"><span class="attr">Output:</span> <span class="number">68</span></span><br></pre></td></tr></table></figure><h3 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h3><p>假定某一步的最末位中, ‘a’ , ‘e’ , ‘i’ , ‘o’ , ‘u’ 的个数分别是 a , e , i , o , u ，那么下一步末位的个数就分别是 <code>u+e+i</code>, <code>a + i</code>, <code>e + o</code> , <code>i</code> , <code>o +i</code></p><p>我这里用了一个hash来保存 (小声：这个hard题是简单题的赶脚233)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> mod = <span class="number">1_000_000_007</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countVowelPermutation</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Long&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;a&#x27;</span>, <span class="number">1L</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;e&#x27;</span>, <span class="number">1L</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;i&#x27;</span>, <span class="number">1L</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;o&#x27;</span>, <span class="number">1L</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;u&#x27;</span>, <span class="number">1L</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            Map&lt;Character, Long&gt; tmp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            tmp.put(<span class="string">&#x27;a&#x27;</span>, (map.get(<span class="string">&#x27;u&#x27;</span>) + map.get(<span class="string">&#x27;e&#x27;</span>) + map.get(<span class="string">&#x27;i&#x27;</span>)) % mod);</span><br><span class="line">            tmp.put(<span class="string">&#x27;e&#x27;</span>, (map.get(<span class="string">&#x27;a&#x27;</span>) + map.get(<span class="string">&#x27;i&#x27;</span>)) % mod);</span><br><span class="line">            tmp.put(<span class="string">&#x27;i&#x27;</span>, (map.get(<span class="string">&#x27;e&#x27;</span>) + map.get(<span class="string">&#x27;o&#x27;</span>)) % mod);</span><br><span class="line">            tmp.put(<span class="string">&#x27;o&#x27;</span>, (map.get(<span class="string">&#x27;i&#x27;</span>)) % mod);</span><br><span class="line">            tmp.put(<span class="string">&#x27;u&#x27;</span>, (map.get(<span class="string">&#x27;o&#x27;</span>) + map.get(<span class="string">&#x27;i&#x27;</span>)) % mod);</span><br><span class="line"></span><br><span class="line">            map = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (map.values().stream().reduce(Long::sum).get() % mod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h2><p>这次周赛4个题目全部 AC , RANK  740</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC周赛 2019-09-15</title>
      <link href="/2019/09/15/lc-zhou-sai-2019-09-15/"/>
      <url>/2019/09/15/lc-zhou-sai-2019-09-15/</url>
      
        <content type="html"><![CDATA[<h2 id="1-寻找字符串中balloon个数"><a class="markdownIt-Anchor" href="#1-寻找字符串中balloon个数"></a> 1. 寻找字符串中Balloon个数</h2><p>给你一个字符串 <code>text</code>，你需要使用 <code>text</code> 中的字母来拼凑尽可能多的单词 <strong>“balloon”（气球）</strong>。</p><p>字符串 <code>text</code> 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 <strong>“balloon”</strong>。</p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路：</h3><p>很快可以通过哈希表来建立一个 <code>字符到字符在text中出现次数</code>的映射, 然后根据<code>ballon</code> 来进行对照得出最终结果: 一定是 { <code>b</code> 出现次数 , <code>a</code> 出现次数 , <code>n</code> 出现次数 , <code>l</code> 出现次数的一半 , <code>o</code> 出现次数的一半 } 中的最小值, 即满足</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxNumberOfBalloons</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.length(); ++i) &#123;</span><br><span class="line">            map.put(text.charAt(i), map.getOrDefault(text.charAt(i), <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> b = map.getOrDefault(<span class="string">&#x27;b&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">                a = map.getOrDefault(<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">                l = map.getOrDefault(<span class="string">&#x27;l&#x27;</span>, <span class="number">0</span>) / <span class="number">2</span>,</span><br><span class="line">                o = map.getOrDefault(<span class="string">&#x27;o&#x27;</span>, <span class="number">0</span>) / <span class="number">2</span>,</span><br><span class="line">                n = map.getOrDefault(<span class="string">&#x27;n&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> Math.min(b, Math.min(a, Math.min(l, Math.min(o, n))));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-反转每对括号间的子串"><a class="markdownIt-Anchor" href="#2-反转每对括号间的子串"></a> 2. 反转每对括号间的子串</h2><p>给出一个字符串 <code>s</code>（仅含有小写英文字母和括号）。</p><p>请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。</p><p>注意，您的结果中 <strong>不应</strong> 包含任何括号。</p><h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路：</h3><p>很明显这是一个 <strong>递归</strong> 问题. 举例说明</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;(u(love)i)&quot;</span></span><br></pre></td></tr></table></figure><p>我们需要先找出 <strong>最小匹配括号子串</strong> , 将其翻转之后, 再对其父级的子串进行翻转.</p><p>但是有一个比较坑的点, 测试用例里面有这样的 <code>a()b(((c)))de</code> ， 也就是说，可以存在平级的括号. 这一点当时没想到. 从这里我们需要改变想法：</p><ul><li>当遇到同级的括号，先处理过当前的 <code>()</code> 对，然后继续使用 ReverseParentheses 来对后续同级括号进行翻转. 这个属于迭代式的处理</li><li>当遇到子级括号, 也就是正常的 <code>(d(c))</code>这样的情况，就使用递归函数解决</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            begin = i;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            end = i;</span><br><span class="line">            String temp = s.substring(begin + <span class="number">1</span>, end);<span class="comment">//最小 ()</span></span><br><span class="line">            <span class="keyword">return</span> reverseParentheses(s.substring(<span class="number">0</span>, begin) + reverseString(temp) + s.substring(end + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">reverseString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] temp = s.toCharArray();</span><br><span class="line">    StringBuilder r = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = temp.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        r.append(temp[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-k次串联数组之后的最大子数组之和"><a class="markdownIt-Anchor" href="#3-k次串联数组之后的最大子数组之和"></a> 3. k次串联数组之后的最大子数组之和</h2><p>给你一个整数数组 <code>arr</code> 和一个整数 <code>k</code>。</p><p>首先，我们要对该数组进行修改，即把原数组 <code>arr</code> 重复 <code>k</code> 次。</p><blockquote><p>举个例子，如果 <code>arr = [1, 2]</code> 且 <code>k = 3</code>，那么修改后的数组就是 <code>[1, 2, 1, 2, 1, 2]</code>。</p></blockquote><p>然后，请你返回修改后的数组中的最大的子数组之和。</p><p>注意，子数组长度可以是 <code>0</code>，在这种情况下它的总和也是 <code>0</code>。</p><p>由于 <strong>结果可能会很大</strong>，所以需要 <strong>模（mod）</strong> <code>10^9 + 7</code> 后再返回。</p><h3 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路：</h3><p>一看，这个不就是最大子数组的翻版吗 hhh , 那么直接贪心上啊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MOD = <span class="number">1000_000_007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">sumHelper</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> totalLen = arr.length * k;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalLen; ++i) &#123;</span><br><span class="line">            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                max = Math.max(sum, max);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么问题来了，<strong>TLE</strong> 了. 也就是说，这个算法不容忍 <strong>O(N)</strong> 的时间复杂度. 我们需要找到数组在进行串联的时候的一个和数关系来进行快速获取答案.</p><h4 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析：</h4><p>前缀和判断，一共如下可能</p><ul><li><p>答案为 0</p></li><li><p>答案仅从当前不串联的数组中得到, 即 k = 1时的最大子数组和</p></li><li><p>答案从 k = 2 的串联结果得到，第一部分的后缀和的最大值加上第二部分的前缀和的最大值。</p></li><li><p>答案从整个串联 k &gt; 2 次后的结果得到，且一定是第一部分的后缀和的最大值，中间部分的总和，加上最后一部分的前缀和的最大值。</p></li></ul><p>第二种可能从<strong>当前前缀和</strong>减去<strong>当前前缀和的最小值</strong>得到。</p><p>前缀和的最大值直接可以维护出来，后缀和的最大值可以通过总和减去前缀和的最小值得到。</p><h4 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h4><p>需要维护数组的 <strong>总和</strong>, <strong>最大前缀和</strong> , <strong>最小前缀和</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MOD = <span class="number">1000_000_007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kConcatenationMaxSum</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> sumHelper(arr);</span><br><span class="line">    <span class="keyword">long</span>[] sum = <span class="keyword">new</span> <span class="keyword">long</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">long</span>[] maxL = <span class="keyword">new</span> <span class="keyword">long</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">long</span>[] minL = <span class="keyword">new</span> <span class="keyword">long</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + arr[i];</span><br><span class="line">        maxL[i] = Math.max(maxL[i - <span class="number">1</span>], sum[i]);</span><br><span class="line">        minL[i] = Math.min(minL[i - <span class="number">1</span>], sum[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) (Math.max(ans,</span><br><span class="line">            Math.max(</span><br><span class="line">                    sum[n] - minL[n] + maxL[n],</span><br><span class="line">                    sum[n] - minL[n] + maxL[n] + sum[n] * (k - <span class="number">2</span>)</span><br><span class="line">            )</span><br><span class="line">    ) % MOD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">sumHelper</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> totalLen = arr.length;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalLen; ++i) &#123;</span><br><span class="line">        sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            max = Math.max(sum, max);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-查找集群内的关键连接"><a class="markdownIt-Anchor" href="#4-查找集群内的关键连接"></a> 4. 查找集群内的「关键连接」</h2><p>力扣数据中心有 <code>n</code> 台服务器，分别按从 <code>0</code> 到 <code>n-1</code> 的方式进行了编号。</p><p>它们之间以「服务器到服务器」点对点的形式相互连接组成了一个内部集群，其中连接 <code>connections</code> 是无向的。</p><p>从形式上讲，<code>connections[i] = [a, b]</code> 表示服务器 <code>a</code> 和 <code>b</code> 之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。</p><p>「关键连接」是在该集群中的重要连接，也就是说，假如我们将它移除，便会导致某些服务器无法访问其他服务器。</p><p>请你以任意顺序返回该集群内的所有 「关键连接」。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/critical-connections-in-a-network.png" alt="img" /></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernets 进行集群部署</title>
      <link href="/2019/09/12/kebernets-jin-xing-ji-qun-bu-shu/"/>
      <url>/2019/09/12/kebernets-jin-xing-ji-qun-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="kubernets-进行集群部署"><a class="markdownIt-Anchor" href="#kubernets-进行集群部署"></a> Kubernets 进行集群部署</h2><h3 id="关键定义"><a class="markdownIt-Anchor" href="#关键定义"></a> 关键定义</h3><ul><li><h5 id="pod"><a class="markdownIt-Anchor" href="#pod"></a> Pod</h5></li></ul><p>运行在Node节点上的若干个容器集合，是一个在容器基础上的更高的抽象。主要由 <code>master</code> 节点进行调度，将生成实例化的 Pod 调度到某一个 Node 上进行绑定；</p><p>当某一个 Node 宕机，可以进行重新调度，将 Pod 调度到其他的 Node 节点上.</p><ul><li><h5 id="replication-controller"><a class="markdownIt-Anchor" href="#replication-controller"></a> Replication Controller</h5></li></ul><p>我们一般不会手动自己创建Pod，这样很难管理。利用Replication Controller，可以定义Pod运行内容，副本的个数等信息，它的升级版本是 ReplicaSet。现在已经创建了Pod的一些副本，那么在这些副本上如何均衡负载呢？我们需要的是Service。</p><ul><li><h5 id="service"><a class="markdownIt-Anchor" href="#service"></a> Service</h5></li></ul><p>可以把一组Pod组成服务 Service，Service有一个虚拟的ClusterIP，服务访问可以通过ClusterIP作为统一请求入口，因为一个 Service 对应一组Pod，所以可以做到负载均衡。服务可以通过 NodePort，LoadBalancer的方式暴露对外服务。注意 type = LoadBalancer需要云服务平台提供基础的服务，自建的K8S集群默认是没有这个东西的。如果在阿里云上定义服务 type = LoadBalancer 后，你会发现，在管理后台的负载均衡页面，会增加一个负载均衡器</p><p>从以上的定义中看出, 一个Node可以认为是一台主机, 而Service作为一个服务提供者, 下包含了多个冗余Node. 能够在某一个Node宕机时及时进行其他备用节点的替补.</p><p>我们需要把docker镜像push到远端的某一个镜像管理平台，而后通过配置文件的形式来定义Pod和Service的内容,实现分布式部署.</p><h3 id="k8s-yaml配置文件"><a class="markdownIt-Anchor" href="#k8s-yaml配置文件"></a> K8s YAML配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yaml格式的pod定义文件完整内容：</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>       <span class="comment">#必选，版本号，例如v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span>       <span class="comment">#必选，Pod</span></span><br><span class="line"><span class="attr">metadata:</span>       <span class="comment">#必选，元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">string</span>       <span class="comment">#必选，Pod名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">string</span>    <span class="comment">#必选，Pod所属的命名空间</span></span><br><span class="line">  <span class="attr">labels:</span>      <span class="comment">#自定义标签</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#自定义标签名字</span></span><br><span class="line">  <span class="attr">annotations:</span>       <span class="comment">#自定义注释列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">spec:</span>         <span class="comment">#必选，Pod中容器的详细定义</span></span><br><span class="line">  <span class="attr">containers:</span>      <span class="comment">#必选，Pod中容器列表</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#必选，容器名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">string</span>    <span class="comment">#必选，容器的镜像名称</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> [<span class="string">Always</span> <span class="string">|</span> <span class="string">Never</span> <span class="string">|</span> <span class="string">IfNotPresent</span>] <span class="comment">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">string</span>]    <span class="comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">string</span>]     <span class="comment">#容器的启动命令参数列表</span></span><br><span class="line">    <span class="attr">workingDir:</span> <span class="string">string</span>     <span class="comment">#容器的工作目录</span></span><br><span class="line">    <span class="attr">volumeMounts:</span>    <span class="comment">#挂载到容器内部的存储卷配置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">string</span>    <span class="comment">#存储卷在容器内mount的绝对路径，应少于512字符</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="string">boolean</span>    <span class="comment">#是否为只读模式</span></span><br><span class="line">    <span class="attr">ports:</span>       <span class="comment">#需要暴露的端口库号列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#端口号名称</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="string">int</span>   <span class="comment">#容器需要监听的端口号</span></span><br><span class="line">      <span class="attr">hostPort:</span> <span class="string">int</span>    <span class="comment">#容器所在主机需要监听的端口号，默认与Container相同</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">string</span>     <span class="comment">#端口协议，支持TCP和UDP，默认TCP</span></span><br><span class="line">    <span class="attr">env:</span>       <span class="comment">#容器运行前需设置的环境变量列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#环境变量名称</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">string</span>    <span class="comment">#环境变量的值</span></span><br><span class="line">    <span class="attr">resources:</span>       <span class="comment">#资源限制和请求的设置</span></span><br><span class="line">      <span class="attr">limits:</span>      <span class="comment">#资源限制的设置</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">string</span>    <span class="comment">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">string</span>     <span class="comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span></span><br><span class="line">      <span class="attr">requests:</span>      <span class="comment">#资源请求的设置</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">string</span>    <span class="comment">#Cpu请求，容器启动的初始可用数量</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">string</span>     <span class="comment">#内存清楚，容器启动的初始可用数量</span></span><br><span class="line">    <span class="attr">livenessProbe:</span>     <span class="comment">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span></span><br><span class="line">      <span class="attr">exec:</span>      <span class="comment">#对Pod容器内检查方式设置为exec方式</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">string</span>]  <span class="comment">#exec方式需要制定的命令或脚本</span></span><br><span class="line">      <span class="attr">httpGet:</span>       <span class="comment">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">number</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">HttpHeaders:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">tcpSocket:</span>     <span class="comment">#对Pod内个容器健康检查方式设置为tcpSocket方式</span></span><br><span class="line">         <span class="attr">port:</span> <span class="string">number</span></span><br><span class="line">       <span class="attr">initialDelaySeconds:</span> <span class="number">0</span>  <span class="comment">#容器启动完成后首次探测的时间，单位为秒</span></span><br><span class="line">       <span class="attr">timeoutSeconds:</span> <span class="number">0</span>   <span class="comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span></span><br><span class="line">       <span class="attr">periodSeconds:</span> <span class="number">0</span>    <span class="comment">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span></span><br><span class="line">       <span class="attr">successThreshold:</span> <span class="number">0</span></span><br><span class="line">       <span class="attr">failureThreshold:</span> <span class="number">0</span></span><br><span class="line">       <span class="attr">securityContext:</span></span><br><span class="line">         <span class="string">privileged:false</span></span><br><span class="line">    <span class="attr">restartPolicy:</span> [<span class="string">Always</span> <span class="string">|</span> <span class="string">Never</span> <span class="string">|</span> <span class="string">OnFailure</span>]<span class="comment">#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span></span><br><span class="line">    <span class="attr">nodeSelector:</span> <span class="string">obeject</span>  <span class="comment">#设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span></span><br><span class="line">    <span class="attr">imagePullSecrets:</span>    <span class="comment">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">    <span class="string">hostNetwork:false</span>      <span class="comment">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span></span><br><span class="line">    <span class="attr">volumes:</span>       <span class="comment">#在该pod上定义共享存储卷列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#共享存储卷名称 （volumes类型有很多种）</span></span><br><span class="line">      <span class="attr">emptyDir:</span> &#123;&#125;     <span class="comment">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span></span><br><span class="line">      <span class="attr">hostPath:</span> <span class="string">string</span>     <span class="comment">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">string</span>     <span class="comment">#Pod所在宿主机的目录，将被用于同期中mount的目录</span></span><br><span class="line">      <span class="attr">secret:</span>      <span class="comment">#类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span></span><br><span class="line">        <span class="attr">scretname:</span> <span class="string">string</span>  </span><br><span class="line">        <span class="attr">items:</span>     </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">configMap:</span>     <span class="comment">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="端口和ip"><a class="markdownIt-Anchor" href="#端口和ip"></a> 端口和IP</h3><p>和docker的内网环境类似，k8s也具有集群内部网络和外部网络.</p><h4 id="1-nodeport"><a class="markdownIt-Anchor" href="#1-nodeport"></a> 1. nodePort</h4><p>外部流量访问k8s集群中service入口的一种方式（另一种方式是LoadBalancer），即nodeIP:nodePort是提供给外部流量访问k8s集群中service的入口。</p><p>比如外部用户要访问k8s集群中的一个Web应用，那么我们可以配置对应service的<strong>type=NodePort</strong>，nodePort=30001。其他用户就可以通过浏览器http://node:30001访问到该web服务。</p><p>而数据库等服务可能不需要被外界访问，只需被内部服务访问即可，那么我们就不必设置service的NodePort。</p><h4 id="2-port"><a class="markdownIt-Anchor" href="#2-port"></a> 2. port</h4><p>k8s集群内部服务之间访问<strong>service</strong>的入口。即<strong>clusterIP:port</strong>是service暴露在clusterIP上的端口。</p><ul><li>mysql容器暴露了3306端口（参考DockerFile），集群内其他容器通过33306端口访问mysql服务，但是<strong>外部流量不能访问mysql服务</strong>，因为mysql服务没有配置NodePort。对应的service.yaml如下：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">mysql-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">33306</span></span><br><span class="line">   <span class="attr">targetPort:</span> <span class="number">3306</span></span><br><span class="line"> <span class="attr">selector:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-pod</span></span><br></pre></td></tr></table></figure><h4 id="3-targetport"><a class="markdownIt-Anchor" href="#3-targetport"></a> 3. targetPort</h4><p>容器的端口（最终的流量端口）。targetPort是pod上的端口，从port和nodePort上来的流量，经过kube-proxy流入到后端pod的targetPort上，最后进入容器。</p><p>与<strong>制作容器时暴露的端口一致</strong>（使用DockerFile中的<strong>EXPOSE</strong>），例如官方的nginx（参考DockerFile）暴露80端口。 对应的service.yaml如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">type:</span> <span class="string">NodePort</span>         <span class="string">//</span> <span class="string">有配置NodePort，外部流量可访问k8s中的服务</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">30080</span>          <span class="string">//</span> <span class="string">服务访问端口</span></span><br><span class="line">   <span class="attr">targetPort:</span> <span class="number">80</span>       <span class="string">//</span> <span class="string">容器端口</span></span><br><span class="line">   <span class="attr">nodePort:</span> <span class="number">30001</span>      <span class="string">//</span> <span class="string">NodePort</span></span><br><span class="line"> <span class="attr">selector:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-pod</span></span><br></pre></td></tr></table></figure><p>总的来说</p><ul><li>port和nodePort都是service的端口，前者暴露给k8s集群内部服务访问，后者暴露给k8s集群外部流量访问。</li><li>从上两个端口过来的数据都需要经过反向代理kube-proxy，流入后端pod的targetPort上，最后到达pod内的容器。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8S </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
